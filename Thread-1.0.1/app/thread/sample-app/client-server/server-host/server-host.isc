#ISD afv6
# ISD version: 3.3.1915

# Application configuration
appId: thread
architecture: pc
deviceName: server-host
generationDirectory: PATH(ISC_RELATIVE):.

# Devices
device: Unix host
device: Router

# Plugin configuration
appPlugin: adc=false
appPlugin: address-configuration-debug=false
appPlugin: ash-v3=false
appPlugin: ash-v3-stub=false
appPlugin: binary-management=false
appPlugin: button=false
appPlugin: button-press=false
appPlugin: button-stub=true
appPlugin: buzzer=false
appPlugin: buzzer-stub=true
appPlugin: cli=true
appPlugin: coap-cli=true
appPlugin: coap-debug=false
appPlugin: command-interpreter2=true
appPlugin: debug-print=true
appPlugin: dhcp-client=true
appPlugin: diagnostic=false
appPlugin: diagnostic-stub=false
appPlugin: ext-device=false
appPlugin: global-address-prefix-debug=true
appPlugin: hal-library=false
appPlugin: hal-link-library=false
appPlugin: heartbeat=false
appPlugin: heartbeat-node-type=false
appPlugin: host-network-management=true
appPlugin: icmp-cli=true
appPlugin: icmp-debug=true
appPlugin: idle-sleep=false
appPlugin: infrared-led=false
appPlugin: key-matrix=false
appPlugin: led=false
appPlugin: led-stub=true
appPlugin: log-cli=false
appPlugin: main=true
appPlugin: mfglib-library=true
appPlugin: mfglib-stub-library=false
appPlugin: ncp-library=false
appPlugin: network-management-cli=true
appPlugin: polling=false
appPlugin: scan-debug=true
appPlugin: serial=true
appPlugin: sim-eeprom1=false
appPlugin: sim-eeprom2=false
appPlugin: sim-eeprom2-1to2-upgrade=false
appPlugin: sim-eeprom2-1to2-upgrade-stub=false
appPlugin: slaac-client=true
appPlugin: stm32f103ret-library=false
appPlugin: tftp-bootload-target=false
appPlugin: thread-stack=false
appPlugin: udp-cli=true
appPlugin: udp-debug=false
appPlugin: unix-library=true
appPlugin: version-debug=true

# Setup configurations
{setupId:additionalFiles
PATH(ISC_RELATIVE):server-host-implementation.c
}
{setupId:boardHeader
}
{setupId:bookkeeping
}
{setupId:bootloader
}
{setupId:callbackConfiguration
emberAfMainCallback:false
emberAfInitCallback:false
emberResumeNetworkReturn:false
emberSetSecurityParametersReturn:false
emberFormNetworkReturn:false
emberJoinNetworkReturn:false
emberAttachToNetworkReturn:false
emberAddressConfigurationChange:false
emberCommissionerStatusHandler:false
emberBecomeCommissionerReturn:false
emberSendSteeringDataReturn:false
emberUdpHandler:false
emberCoapMessageHandler:false
emberResetNetworkStateReturn:false
}
{setupId:commandLineConfiguration
on
expect,expectCommand,bb*,unlocked
advertise,advertiseCommand,,unlocked
}
{setupId:debugConfiguration
on
area name off
appSerial=1
}
{setupId:eventConfiguration
stateEventControl,stateEventHandler
}
{setupId:genConfig
}
{setupId:halOptions
}
{setupId:information
\{key:description
Client/Server Sample Applications

The client and server applications demonstrate basic Thread network functionality for a wireless sensor network.  This server application acts as a data sink and collects information from client nodes that act as sensors.  The client and server communicate using the Constrained Application Protocol (CoAP) at the application layer, with UDP serving as the transport layer.  CoAP and UDP are provided by the Thread stack.

At startup, the server will automatically start network operations.  If the node is starting for the first time, it will form a new network called "client/server."  If it had already formed a network previously, it will simply resume network operations using the network parameters stored in non-volatile memory in the stack.  After forming or resuming, the application establishes itself as the commissioning device of the network.  This means the server is responsible for allowing other devices to join the network.

The server sends advertisement messages to the network at regular intervals using multicast transmission.  The advertisements, sent as CoAP POST requests to the "server/advertise" URI, inform clients in the network about the presence of the server.  When a client without a server receives the advertisement, it will begin sending sensor data to the server.  Sensor data are sent as CoAP POST requests to the "client/report" URI, and are unicast directly to the server.  In these examples, the sensor data are the current temperature, as provided by the temperature sensor on the development board of the client nodes.

Before attempting to join the network, the client nodes print their unique join key to the console.  This key must be provided to the commissioner (i.e., the server) before the client will be able to join the network.  For example, when joining, the client will display a message such as:

Searching for network "client/server" using join key "174F5B07"

In this example, "174F5B07" is the unique join key for the client.  The join key can be provided to the server and joining can be enabled via the following CLI command:

expect "174F5B07"

If the EUI64 of the client is known, it can be specified in order to further assist in joining the correct node:

expect "174F5B07" \\{01 34 04 78 23 56 00 34\\}

It is important to note that each client will have a different join key.  It is essential that the server be informed of the exact join key used by the client.  If the join key is not provided to the server, or if an incorrect key is provided, the client will not be able to join.

The server host sample application uses the ip-driver-app utility program to communicate with the NCP.  ip-driver-app must be started first and must remaining running for the host application to function.  It may be run in the background as a daemon.  The host application, which provides the familiar command line interface, is then run.  Assuming the NCP is connected as /dev/ttyUSB0, the following commands will start ip-driver-app and the host application:

$ sudo THREAD_HOME/build/ip-driver-app/ip-driver-app -u /dev/ttyUSB0 -t tun0 -m 4901 &
$ sudo ./build/exe/server-host -m 4901

All application code is contained in the server-host-implementation.c file within the application directory.
\}
}
{setupId:macros
REPORTS_CSV="/var/www/reports.csv"
}
{setupId:serial
}
{setupId:token
}

# Plugin options
