###############################################################################
#
# IAR ANSI C/C++ Compiler V7.30.1.7746/W32 for ARM        28/Sep/2015  13:29:34
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\SiliconLabs\Thread-1.0.1\app\util\bootload\tftp\server\tftp-server.c
#    Command line =  
#        C:\SiliconLabs\Thread-1.0.1\app\util\bootload\tftp\server\tftp-server.c
#        -D APP_BTL -D CORTEXM3 -D CORTEXM3_EMBER_MICRO -D CORTEXM3_EM3588 -D
#        PHY_EM3XX -D "BOARD_HEADER=\"thread-board.h\"" -D
#        "CONFIGURATION_HEADER=\"thread-configuration.h\"" -D
#        "PLATFORM_HEADER=\"hal/micro/cortexm3/compiler/iar.h\"" -D
#        "__SOURCEFILE__=\"tftp-server.c\"" -D BOARD_DEV0680ETM -D
#        "EMBER_AF_API_EMBER_TYPES=\"stack/include/ember-types.h\"" -D
#        EMBER_STACK_IP -D EMBER_RIP_STACK -D HAVE_TLS_JPAKE -D
#        DEBUG_LEVEL=FULL_DEBUG -D
#        "APPLICATION_TOKEN_HEADER=\"thread-token.h\"" -lC
#        C:\SiliconLabs\Thread-1.0.1\app\Thread_Sample_Server\build\lst\
#        --diag_suppress Pa050 -o
#        C:\SiliconLabs\Thread-1.0.1\app\Thread_Sample_Server\build\obj\
#        --debug --endian=little --cpu=Cortex-M3 --no_path_in_file_macros
#        --separate_cluster_for_initialized_variables -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\SiliconLabs\Thread-1.0.1\app\util\bootload\tftp\server\ -I
#        C:\SiliconLabs\Thread-1.0.1\app\Thread_Sample_Server\ -I
#        C:\SiliconLabs\Thread-1.0.1\app\Thread_Sample_Server\..\..\ -I
#        C:\SiliconLabs\Thread-1.0.1\app\Thread_Sample_Server\..\..\app\util\
#        -I C:\SiliconLabs\Thread-1.0.1\app\Thread_Sample_Server\..\..\stack\
#        -I C:\SiliconLabs\Thread-1.0.1\app\Thread_Sample_Server\..\..\hal\ -I
#        C:\SiliconLabs\Thread-1.0.1\app\Thread_Sample_Server\..\..\hal\..\
#        -Ohz --use_c++_inline
#    List file    =  
#        C:\SiliconLabs\Thread-1.0.1\app\Thread_Sample_Server\build\lst\tftp-server.lst
#    Object file  =  
#        C:\SiliconLabs\Thread-1.0.1\app\Thread_Sample_Server\build\obj\tftp-server.o
#
###############################################################################

C:\SiliconLabs\Thread-1.0.1\app\util\bootload\tftp\server\tftp-server.c
      1          // File: tftp-server.c
      2          //
      3          // Description: TFTP Server Functionality
      4          //
      5          // Copyright 2013 by Silicon Laboratories. All rights reserved.             *80*
      6          
      7          #include PLATFORM_HEADER
      8          #include "stack/include/ember.h"
      9          #include "hal/hal.h"
     10          #include "app/util/serial/serial.h"
     11          #include "app/util/bootload/tftp/tftp.h"
     12          #include "app/util/bootload/tftp/server/tftp-server.h"
     13          
     14          #include <stdlib.h>
     15          
     16          extern bool emTestingDone(void);
     17          

   \                                 In section .data, align 2
     18          uint16_t emTftpScriptingTid = 0xFFFF;
   \                     emTftpScriptingTid:
   \   00000000   0xFFFF             DC16 65535
     19          

   \                                 In section .text, align 2, keep-with-next
     20          void emInitializeTftpServer(void)
     21          {
     22            // listen initially on TFTP_PORT
     23            emTftpLocalTid = TFTP_PORT;
   \                     emInitializeTftpServer: (+1)
   \   00000000   0x....             LDR.N    R1,??DataTable10
   \   00000002   0x2045             MOVS     R0,#+69
   \   00000004   0x8008             STRH     R0,[R1, #+0]
     24            emTftpListen(false);
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x.... 0x....      B.W      emTftpListen
     25          }
     26          

   \                                 In section .text, align 2, keep-with-next
     27          void emResetTftpServer(void)
     28          {
   \                     emResetTftpServer: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     29            emResetTftp();
   \   00000002   0x.... 0x....      BL       emResetTftp
     30            emInitializeTftpServer();
   \   00000006   0xE8BD 0x4001      POP      {R0,LR}
   \   0000000A   0x....             B.N      emInitializeTftpServer
     31          }
     32          

   \                                 In section .text, align 2, keep-with-next
     33          void emTftpStatusHandler(TftpStatus status)
     34          {
     35          #if (defined UNIX_HOST) || (defined UNIX_HOST_SIM)
     36            if (status == TFTP_INTERFACE_CHOSEN) {
     37              // we must wait until an interface is chosen to listen on port TFTP_PORT
     38              emInitializeTftpServer();
     39            }
     40          #endif
     41          }
   \                     emTftpStatusHandler: (+1)
   \   00000000   0x4770             BX       LR               ;; return
     42          

   \                                 In section .text, align 2, keep-with-next
     43          void emSendTftpAck(void)
     44          {
   \                     emSendTftpAck: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
     45            uint8_t payload[20] = {0};
   \   00000004   0xA800             ADD      R0,SP,#+0
   \   00000006   0x2114             MOVS     R1,#+20
   \   00000008   0x.... 0x....      BL       __aeabi_memclr4
     46            uint8_t *finger = payload;
     47            emberStoreHighLowInt16u(finger, TFTP_ACK);
   \   0000000C   0x2104             MOVS     R1,#+4
   \   0000000E   0xA800             ADD      R0,SP,#+0
   \   00000010   0x.... 0x....      BL       emberStoreHighLowInt16u
     48            finger += sizeof(uint16_t);
     49            emberStoreHighLowInt16u(finger, emTftpBlockNumber);
   \   00000014   0x....             LDR.N    R0,??DataTable10_1
   \   00000016   0x8801             LDRH     R1,[R0, #+0]
   \   00000018   0xF10D 0x0002      ADD      R0,SP,#+2
   \   0000001C   0x.... 0x....      BL       emberStoreHighLowInt16u
     50            finger += sizeof(uint16_t);
     51            emSendTftpPacket(payload, finger - payload);
   \   00000020   0x2104             MOVS     R1,#+4
   \   00000022   0xA800             ADD      R0,SP,#+0
   \   00000024   0x.... 0x....      BL       emSendTftpPacket
     52          }
   \   00000028   0xB005             ADD      SP,SP,#+20
   \   0000002A   0xBD00             POP      {PC}             ;; return

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_7:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
     53          

   \                                 In section .text, align 2, keep-with-next
     54          static const uint8_t *readString(const uint8_t **finger, const uint8_t *limit)
     55          {
   \                     readString: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
     56            const uint8_t *result = *finger;
   \   00000004   0x6825             LDR      R5,[R4, #+0]
     57            uint8_t length = emStrlen(result) + 1;
   \   00000006   0x4628             MOV      R0,R5
   \   00000008   0x.... 0x....      BL       emStrlen
     58            *finger += length;
   \   0000000C   0x6821             LDR      R1,[R4, #+0]
   \   0000000E   0x1C40             ADDS     R0,R0,#+1
   \   00000010   0xB2C0             UXTB     R0,R0
   \   00000012   0x1840             ADDS     R0,R0,R1
   \   00000014   0x6020             STR      R0,[R4, #+0]
     59          
     60            if (*finger >= limit) {
     61              // error
     62            }
     63          
     64            return result;
   \   00000016   0x4628             MOV      R0,R5
   \   00000018   0xBD32             POP      {R1,R4,R5,PC}    ;; return
     65          }
     66          
     67          static void readOptions(const uint8_t **finger, const uint8_t *limit)
     68          {
     69            while (*finger < limit) {
     70              const uint8_t *key = readString(finger, limit);
     71              const uint8_t *value = readString(finger, limit);
     72          
     73              if (emStrcmp(key, TFTP_BLOCK_SIZE_STRING) == 0) {
     74                emTftpBlockSize = atoi((char*)value);
     75              }
     76            }
     77          }
     78          

   \                                 In section .text, align 2, keep-with-next
     79          void emProcessTftpPacket(const uint8_t *source,
     80                                   uint16_t remotePort,
     81                                   const uint8_t *payload,
     82                                   uint16_t payloadLength)
     83          {
   \                     emProcessTftpPacket: (+1)
   \   00000000   0xE92D 0x4FF2      PUSH     {R1,R4-R11,LR}
   \   00000004   0xB084             SUB      SP,SP,#+16
   \   00000006   0x4681             MOV      R9,R0
     84            const uint8_t *finger = payload;
   \   00000008   0x9202             STR      R2,[SP, #+8]
     85            const uint8_t *limit = payload + payloadLength;
   \   0000000A   0x189C             ADDS     R4,R3,R2
     86            uint8_t opcode = emberFetchHighLowInt16u(finger);
   \   0000000C   0x4610             MOV      R0,R2
   \   0000000E   0x.... 0x....      BL       emberFetchHighLowInt16u
     87            finger += sizeof(uint16_t);
   \   00000012   0x9902             LDR      R1,[SP, #+8]
   \   00000014   0xB2C0             UXTB     R0,R0
   \   00000016   0x1C89             ADDS     R1,R1,#+2
     88          
     89            if (opcode == TFTP_WRITE_REQUEST) {
   \   00000018   0x2802             CMP      R0,#+2
   \   0000001A   0x9102             STR      R1,[SP, #+8]
   \   0000001C   0x....             LDR.N    R5,??DataTable10_2
   \   0000001E   0x....             LDR.N    R6,??DataTable10_3
   \   00000020   0x.... 0x....      ADR.W    R8,?_1
   \   00000024   0x....             LDR.N    R7,??DataTable10_1
   \   00000026   0xD15A             BNE.N    ??emProcessTftpPacket_0
     90              assert(emTftpBlockNumber == 0);
   \   00000028   0x8838             LDRH     R0,[R7, #+0]
   \   0000002A   0xB110             CBZ.N    R0,??CrossCallReturnLabel_7
   \   0000002C   0x215A             MOVS     R1,#+90
   \   0000002E   0x.... 0x....      BL       ?Subroutine1
     91          
     92              if (emTftpRemoteTid != 0xFFFF) {
   \                     ??CrossCallReturnLabel_7: (+1)
   \   00000032   0x....             LDR.N    R0,??DataTable10_4
   \   00000034   0x8802             LDRH     R2,[R0, #+0]
   \   00000036   0xF64F 0x71FF      MOVW     R1,#+65535
   \   0000003A   0x428A             CMP      R2,R1
   \   0000003C   0xD005             BEQ.N    ??emProcessTftpPacket_1
     93                emberSerialPrintfLine(APP_SERIAL,
     94                                      "TFTP server already has a remote TID: %u, exiting",
     95                                      emTftpRemoteTid);
   \   0000003E   0x.... 0x....      ADR.W    R1,?_2
   \   00000042   0x2001             MOVS     R0,#+1
   \   00000044   0x.... 0x....      BL       emberSerialPrintfLine
     96                return;
   \   00000048   0xE07E             B.N      ??CrossCallReturnLabel_4
     97              }
     98          
     99              assert(emTftpRemoteTid == 0xFFFF);
    100              emTftpRemoteTid = remotePort;
   \                     ??emProcessTftpPacket_1: (+1)
   \   0000004A   0xF8BD 0x1010      LDRH     R1,[SP, #+16]
   \   0000004E   0x8001             STRH     R1,[R0, #+0]
    101              MEMCOPY(emTftpRemoteIp.bytes, source, 16);
   \   00000050   0x2210             MOVS     R2,#+16
   \   00000052   0x4649             MOV      R1,R9
   \   00000054   0x....             LDR.N    R0,??DataTable10_5
   \   00000056   0x.... 0x....      BL       halCommonMemMove
    102          
    103              const uint8_t *filename = readString((const uint8_t **)&finger, limit);
   \   0000005A   0x.... 0x....      BL       ?Subroutine0
   \                     ??CrossCallReturnLabel_3: (+1)
   \   0000005E   0x9003             STR      R0,[SP, #+12]
    104              const uint8_t *mode = readString((const uint8_t **)&finger, limit);
   \   00000060   0x.... 0x....      BL       ?Subroutine0
   \                     ??CrossCallReturnLabel_2: (+1)
   \   00000064   0x4681             MOV      R9,R0
   \   00000066   0xE011             B.N      ??emProcessTftpPacket_2
    105              readOptions(&finger, limit);
   \                     ??emProcessTftpPacket_3: (+1)
   \   00000068   0x.... 0x....      BL       ?Subroutine0
   \                     ??CrossCallReturnLabel_1: (+1)
   \   0000006C   0x4682             MOV      R10,R0
   \   0000006E   0x.... 0x....      BL       ?Subroutine0
   \                     ??CrossCallReturnLabel_0: (+1)
   \   00000072   0x4683             MOV      R11,R0
   \   00000074   0x.... 0x....      ADR.W    R1,?_0
   \   00000078   0x4650             MOV      R0,R10
   \   0000007A   0x.... 0x....      BL       emStrcmp
   \   0000007E   0xB928             CBNZ.N   R0,??emProcessTftpPacket_2
   \   00000080   0x220A             MOVS     R2,#+10
   \   00000082   0x2100             MOVS     R1,#+0
   \   00000084   0x4658             MOV      R0,R11
   \   00000086   0x.... 0x....      BL       __iar_Stoul
   \   0000008A   0x8030             STRH     R0,[R6, #+0]
   \                     ??emProcessTftpPacket_2: (+1)
   \   0000008C   0x9802             LDR      R0,[SP, #+8]
   \   0000008E   0x42A0             CMP      R0,R4
   \   00000090   0xD3EA             BCC.N    ??emProcessTftpPacket_3
    106          
    107              assert(emStrcmp(mode, TFTP_DEFAULT_MODE) == 0);
   \   00000092   0x.... 0x....      ADR.W    R1,?_3
   \   00000096   0x4648             MOV      R0,R9
   \   00000098   0x.... 0x....      BL       emStrcmp
   \   0000009C   0xB110             CBZ.N    R0,??CrossCallReturnLabel_6
   \   0000009E   0x216B             MOVS     R1,#+107
   \   000000A0   0x.... 0x....      BL       ?Subroutine1
    108              emTftpBlockNumber = 0;
   \                     ??CrossCallReturnLabel_6: (+1)
   \   000000A4   0x2000             MOVS     R0,#+0
   \   000000A6   0x8038             STRH     R0,[R7, #+0]
    109          
    110              if (emTftpScripting) {
   \   000000A8   0x7828             LDRB     R0,[R5, #+0]
   \   000000AA   0xB910             CBNZ.N   R0,??emProcessTftpPacket_4
    111          #ifdef UNIX_HOST
    112                // listen on the scripting TID
    113                emTftpLocalTid = emTftpScriptingTid;
    114                emTftpOpenTraceFd('s', 'c');
    115          #endif
    116              } else {
    117                // choose a new random TID
    118                emTftpListen(true);
   \   000000AC   0x2001             MOVS     R0,#+1
   \   000000AE   0x.... 0x....      BL       emTftpListen
    119              }
    120          
    121              emTftpServerStatusHandler(TFTP_FILE_WRITE_REQUEST);
   \                     ??emProcessTftpPacket_4: (+1)
   \   000000B2   0x2000             MOVS     R0,#+0
   \   000000B4   0x.... 0x....      BL       emTftpServerStatusHandler
    122              emSendTftpAck();
   \   000000B8   0x.... 0x....      BL       emSendTftpAck
    123          
    124              if (! emTftpScripting) {
   \   000000BC   0x7828             LDRB     R0,[R5, #+0]
   \   000000BE   0x2800             CMP      R0,#+0
   \   000000C0   0xD142             BNE.N    ??CrossCallReturnLabel_4
    125                emberSerialPrintfLine(APP_SERIAL,
    126                                      "[RX write request for file %s, "
    127                                      "mode %s, "
    128                                      "remote port %u, "
    129                                      "new local port %u]",
    130                                      filename,
    131                                      mode,
    132                                      remotePort,
    133                                      emTftpLocalTid);
   \   000000C2   0x....             LDR.N    R0,??DataTable10
   \   000000C4   0x8800             LDRH     R0,[R0, #+0]
   \   000000C6   0x9A03             LDR      R2,[SP, #+12]
   \   000000C8   0x.... 0x....      ADR.W    R1,?_4
   \   000000CC   0x9001             STR      R0,[SP, #+4]
   \   000000CE   0x464B             MOV      R3,R9
   \   000000D0   0xF8BD 0x0010      LDRH     R0,[SP, #+16]
   \   000000D4   0x9000             STR      R0,[SP, #+0]
   \   000000D6   0x2001             MOVS     R0,#+1
   \   000000D8   0x.... 0x....      BL       emberSerialPrintfLine
   \   000000DC   0xE034             B.N      ??CrossCallReturnLabel_4
    134              }
    135            } else if (opcode == TFTP_DATA) {
   \                     ??emProcessTftpPacket_0: (+1)
   \   000000DE   0x2803             CMP      R0,#+3
   \   000000E0   0xD12F             BNE.N    ??emProcessTftpPacket_5
    136              uint16_t blockNumber = emberFetchHighLowInt16u(finger);
   \   000000E2   0x4608             MOV      R0,R1
   \   000000E4   0x.... 0x....      BL       emberFetchHighLowInt16u
    137              finger += sizeof(uint16_t);
   \   000000E8   0x9902             LDR      R1,[SP, #+8]
   \   000000EA   0x1C89             ADDS     R1,R1,#+2
   \   000000EC   0x9102             STR      R1,[SP, #+8]
    138          
    139              if (blockNumber == emTftpBlockNumber + 1) {
   \   000000EE   0x8839             LDRH     R1,[R7, #+0]
   \   000000F0   0x1C49             ADDS     R1,R1,#+1
   \   000000F2   0x4288             CMP      R0,R1
   \   000000F4   0xD128             BNE.N    ??CrossCallReturnLabel_4
    140                emTftpBlockNumber = blockNumber;
   \   000000F6   0x8038             STRH     R0,[R7, #+0]
    141          
    142                // 4 comes from 2 bytes for opcode, and 2 bytes for block number
    143                uint16_t blockSize = (limit - finger);
   \   000000F8   0x9802             LDR      R0,[SP, #+8]
   \   000000FA   0x1A24             SUBS     R4,R4,R0
    144                assert(blockSize <= emTftpBlockSize);
   \   000000FC   0x8830             LDRH     R0,[R6, #+0]
   \   000000FE   0xB2A4             UXTH     R4,R4
   \   00000100   0x42A0             CMP      R0,R4
   \   00000102   0xD202             BCS.N    ??CrossCallReturnLabel_5
   \   00000104   0x2190             MOVS     R1,#+144
   \   00000106   0x.... 0x....      BL       ?Subroutine1
    145          
    146                emStoreTftpFileChunk((emTftpBlockNumber - 1) * emTftpBlockSize,
    147                                     finger,
    148                                     blockSize);
   \                     ??CrossCallReturnLabel_5: (+1)
   \   0000010A   0x8838             LDRH     R0,[R7, #+0]
   \   0000010C   0x8833             LDRH     R3,[R6, #+0]
   \   0000010E   0x9902             LDR      R1,[SP, #+8]
   \   00000110   0x1E40             SUBS     R0,R0,#+1
   \   00000112   0x4622             MOV      R2,R4
   \   00000114   0x4358             MULS     R0,R3,R0
   \   00000116   0x.... 0x....      BL       emStoreTftpFileChunk
    149                emSendTftpAck();
   \   0000011A   0x.... 0x....      BL       emSendTftpAck
    150          
    151                if (! emTftpScripting) {
    152                  //emberSerialPrintfLine(APP_SERIAL,
    153                  //                      "[RX [%u/%u] on port %u]",
    154                  //                      emTftpBlockNumber,
    155                  //                      blockSize,
    156                  //                      emTftpLocalTid);
    157                }
    158          
    159                if (blockSize < emTftpBlockSize) {
   \   0000011E   0x8830             LDRH     R0,[R6, #+0]
   \   00000120   0x4284             CMP      R4,R0
   \   00000122   0xD211             BCS.N    ??CrossCallReturnLabel_4
    160                  if (! emTftpScripting) {
   \   00000124   0x7828             LDRB     R0,[R5, #+0]
   \   00000126   0xB920             CBNZ.N   R0,??emProcessTftpPacket_6
    161                    emberSerialPrintfLine(APP_SERIAL, "[RX done receiving file]");
   \   00000128   0x.... 0x....      ADR.W    R1,?_5
   \   0000012C   0x2001             MOVS     R0,#+1
   \   0000012E   0x.... 0x....      BL       emberSerialPrintfLine
    162                  }
    163          
    164                  emTftpServerStatusHandler(TFTP_FILE_DONE);
   \                     ??emProcessTftpPacket_6: (+1)
   \   00000132   0x2001             MOVS     R0,#+1
   \   00000134   0x.... 0x....      BL       emTftpServerStatusHandler
    165          
    166                  // we're done
    167                  emResetTftpServer();
   \   00000138   0x.... 0x....      BL       emResetTftp
   \   0000013C   0x.... 0x....      BL       emInitializeTftpServer
    168          
    169          #ifdef UNIX_HOST
    170                  if (emTftpScripting) {
    171                    assert(emTestingDone());
    172                    finishRunningTrace();
    173                    exit(0);
    174                  }
    175          #endif
    176                }
    177              } else {
    178                // ignore ?
    179              }
    180            } else {
   \   00000140   0xE002             B.N      ??CrossCallReturnLabel_4
    181              // send error
    182              assert(false);
   \                     ??emProcessTftpPacket_5: (+1)
   \   00000142   0x21B6             MOVS     R1,#+182
   \   00000144   0x.... 0x....      BL       ?Subroutine1
    183            }
    184          }
   \                     ??CrossCallReturnLabel_4: (+1)
   \   00000148   0xB005             ADD      SP,SP,#+20
   \   0000014A   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine1: (+1)
   \   00000000   0x4640             MOV      R0,R8
   \   00000002   0x.... 0x....      B.W      halInternalAssertFailed

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \   00000000   0x4621             MOV      R1,R4
   \   00000002   0xA802             ADD      R0,SP,#+8
   \   00000004   0x....             B.N      readString
    185          

   \                                 In section .text, align 2, keep-with-next
    186          void emTftpPrintHelp(void)
    187          {
    188            const char *output =
    189              "\n********************************************************************\n\n"
    190              "TFTP Server Application\n\n";
    191            emberSerialPrintfLine(APP_SERIAL, output);
   \                     emTftpPrintHelp: (+1)
   \   00000000   0x.... 0x....      ADR.W    R1,?_6
   \   00000004   0x2001             MOVS     R0,#+1
   \   00000006   0x.... 0x....      B.W      emberSerialPrintfLine
    192          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10:
   \   00000000   0x........         DC32     emTftpLocalTid

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_1:
   \   00000000   0x........         DC32     emTftpBlockNumber

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_2:
   \   00000000   0x........         DC32     emTftpScripting

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_3:
   \   00000000   0x........         DC32     emTftpBlockSize

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_4:
   \   00000000   0x........         DC32     emTftpRemoteTid

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_5:
   \   00000000   0x........         DC32     emTftpRemoteIp

   \                                 In section .text, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x62 0x6C          DC8 "blksize"
   \              0x6B 0x73    
   \              0x69 0x7A    
   \              0x65 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_1:
   \   00000000   0x74 0x66          DC8 "tftp-server.c"
   \              0x74 0x70    
   \              0x2D 0x73    
   \              0x65 0x72    
   \              0x76 0x65    
   \              0x72 0x2E    
   \              0x63 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_2:
   \   00000000   0x54 0x46          DC8 "TFTP server already has a remote TID: %u, exiting"
   \              0x54 0x50    
   \              0x20 0x73    
   \              0x65 0x72    
   \              0x76 0x65    
   \              0x72 0x20    
   \              0x61 0x6C    
   \              0x72 0x65    
   \              0x61 0x64    
   \              0x79 0x20    
   \              0x68 0x61    
   \              0x73 0x20    
   \              0x61 0x20    
   \              0x72 0x65    
   \              0x6D 0x6F    
   \              0x74 0x65    
   \              0x20 0x54    
   \              0x49 0x44    
   \              0x3A 0x20    
   \              0x25 0x75    
   \              0x2C 0x20    
   \              0x65 0x78    
   \              0x69 0x74    
   \              0x69 0x6E    
   \              0x67 0x00    
   \   00000032   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_3:
   \   00000000   0x6F 0x63          DC8 "octet"
   \              0x74 0x65    
   \              0x74 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_4:
   \   00000000   0x5B 0x52          DC8 5BH, 52H, 58H, 20H, 77H, 72H, 69H, 74H
   \              0x58 0x20    
   \              0x77 0x72    
   \              0x69 0x74    
   \   00000008   0x65 0x20          DC8 65H, 20H, 72H, 65H, 71H, 75H, 65H, 73H
   \              0x72 0x65    
   \              0x71 0x75    
   \              0x65 0x73    
   \   00000010   0x74 0x20          DC8 74H, 20H, 66H, 6FH, 72H, 20H, 66H, 69H
   \              0x66 0x6F    
   \              0x72 0x20    
   \              0x66 0x69    
   \   00000018   0x6C 0x65          DC8 6CH, 65H, 20H, 25H, 73H, 2CH, 20H, 6DH
   \              0x20 0x25    
   \              0x73 0x2C    
   \              0x20 0x6D    
   \   00000020   0x6F 0x64          DC8 6FH, 64H, 65H, 20H, 25H, 73H, 2CH, 20H
   \              0x65 0x20    
   \              0x25 0x73    
   \              0x2C 0x20    
   \   00000028   0x72 0x65          DC8 72H, 65H, 6DH, 6FH, 74H, 65H, 20H, 70H
   \              0x6D 0x6F    
   \              0x74 0x65    
   \              0x20 0x70    
   \   00000030   0x6F 0x72          DC8 6FH, 72H, 74H, 20H, 25H, 75H, 2CH, 20H
   \              0x74 0x20    
   \              0x25 0x75    
   \              0x2C 0x20    
   \   00000038   0x6E 0x65          DC8 6EH, 65H, 77H, 20H, 6CH, 6FH, 63H, 61H
   \              0x77 0x20    
   \              0x6C 0x6F    
   \              0x63 0x61    
   \   00000040   0x6C 0x20          DC8 6CH, 20H, 70H, 6FH, 72H, 74H, 20H, 25H
   \              0x70 0x6F    
   \              0x72 0x74    
   \              0x20 0x25    
   \   00000048   0x75 0x5D          DC8 75H, 5DH, 0
   \              0x00         
   \   0000004B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_5:
   \   00000000   0x5B 0x52          DC8 "[RX done receiving file]"
   \              0x58 0x20    
   \              0x64 0x6F    
   \              0x6E 0x65    
   \              0x20 0x72    
   \              0x65 0x63    
   \              0x65 0x69    
   \              0x76 0x69    
   \              0x6E 0x67    
   \              0x20 0x66    
   \              0x69 0x6C    
   \              0x65 0x5D    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_6:
   \   00000000   0x0A 0x2A          DC8 0AH, 2AH, 2AH, 2AH, 2AH, 2AH, 2AH, 2AH
   \              0x2A 0x2A    
   \              0x2A 0x2A    
   \              0x2A 0x2A    
   \   00000008   0x2A 0x2A          DC8 2AH, 2AH, 2AH, 2AH, 2AH, 2AH, 2AH, 2AH
   \              0x2A 0x2A    
   \              0x2A 0x2A    
   \              0x2A 0x2A    
   \   00000010   0x2A 0x2A          DC8 2AH, 2AH, 2AH, 2AH, 2AH, 2AH, 2AH, 2AH
   \              0x2A 0x2A    
   \              0x2A 0x2A    
   \              0x2A 0x2A    
   \   00000018   0x2A 0x2A          DC8 2AH, 2AH, 2AH, 2AH, 2AH, 2AH, 2AH, 2AH
   \              0x2A 0x2A    
   \              0x2A 0x2A    
   \              0x2A 0x2A    
   \   00000020   0x2A 0x2A          DC8 2AH, 2AH, 2AH, 2AH, 2AH, 2AH, 2AH, 2AH
   \              0x2A 0x2A    
   \              0x2A 0x2A    
   \              0x2A 0x2A    
   \   00000028   0x2A 0x2A          DC8 2AH, 2AH, 2AH, 2AH, 2AH, 2AH, 2AH, 2AH
   \              0x2A 0x2A    
   \              0x2A 0x2A    
   \              0x2A 0x2A    
   \   00000030   0x2A 0x2A          DC8 2AH, 2AH, 2AH, 2AH, 2AH, 2AH, 2AH, 2AH
   \              0x2A 0x2A    
   \              0x2A 0x2A    
   \              0x2A 0x2A    
   \   00000038   0x2A 0x2A          DC8 2AH, 2AH, 2AH, 2AH, 2AH, 2AH, 2AH, 2AH
   \              0x2A 0x2A    
   \              0x2A 0x2A    
   \              0x2A 0x2A    
   \   00000040   0x2A 0x2A          DC8 2AH, 2AH, 2AH, 2AH, 2AH, 0AH, 0AH, 54H
   \              0x2A 0x2A    
   \              0x2A 0x0A    
   \              0x0A 0x54    
   \   00000048   0x46 0x54          DC8 46H, 54H, 50H, 20H, 53H, 65H, 72H, 76H
   \              0x50 0x20    
   \              0x53 0x65    
   \              0x72 0x76    
   \   00000050   0x65 0x72          DC8 65H, 72H, 20H, 41H, 70H, 70H, 6CH, 69H
   \              0x20 0x41    
   \              0x70 0x70    
   \              0x6C 0x69    
   \   00000058   0x63 0x61          DC8 63H, 61H, 74H, 69H, 6FH, 6EH, 0AH, 0AH
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x0A 0x0A    
   \   00000060   0x00               DC8 0
   \   00000061   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   emInitializeTftpServer
         0   -> emTftpListen
      56   emProcessTftpPacket
        56   -> __iar_Stoul
        56   -> emInitializeTftpServer
        56   -> emResetTftp
        56   -> emSendTftpAck
        56   -> emStoreTftpFileChunk
        56   -> emStrcmp
        56   -> emTftpListen
        56   -> emTftpServerStatusHandler
        56   -> emberFetchHighLowInt16u
        56   -> emberSerialPrintfLine
        56   -> halCommonMemMove
        56   -> halInternalAssertFailed
        56   -> readString
       8   emResetTftpServer
         0   -> emInitializeTftpServer
         8   -> emResetTftp
      24   emSendTftpAck
        24   -> __aeabi_memclr4
        24   -> emSendTftpPacket
        24   -> emberStoreHighLowInt16u
       0   emTftpPrintHelp
         0   -> emberSerialPrintfLine
       0   emTftpStatusHandler
      16   readString
        16   -> emStrlen


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable10
       4  ??DataTable10_1
       4  ??DataTable10_2
       4  ??DataTable10_3
       4  ??DataTable10_4
       4  ??DataTable10_5
       6  ?Subroutine0
       6  ?Subroutine1
       8  ?_0
      16  ?_1
      52  ?_2
       8  ?_3
      76  ?_4
      28  ?_5
     100  ?_6
      20  ?_7
      12  emInitializeTftpServer
     334  emProcessTftpPacket
      12  emResetTftpServer
      44  emSendTftpAck
      10  emTftpPrintHelp
       2  emTftpScriptingTid
       2  emTftpStatusHandler
      26  readString

 
   2 bytes in section .data
  20 bytes in section .rodata
 764 bytes in section .text
 
 764 bytes of CODE  memory
  20 bytes of CONST memory
   2 bytes of DATA  memory

Errors: none
Warnings: none
