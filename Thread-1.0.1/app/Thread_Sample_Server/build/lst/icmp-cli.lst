###############################################################################
#
# IAR ANSI C/C++ Compiler V7.30.1.7746/W32 for ARM        28/Sep/2015  13:29:28
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\SiliconLabs\Thread-1.0.1\app\thread\plugin\icmp-cli\icmp-cli.c
#    Command line =  
#        C:\SiliconLabs\Thread-1.0.1\app\thread\plugin\icmp-cli\icmp-cli.c -D
#        APP_BTL -D CORTEXM3 -D CORTEXM3_EMBER_MICRO -D CORTEXM3_EM3588 -D
#        PHY_EM3XX -D "BOARD_HEADER=\"thread-board.h\"" -D
#        "CONFIGURATION_HEADER=\"thread-configuration.h\"" -D
#        "PLATFORM_HEADER=\"hal/micro/cortexm3/compiler/iar.h\"" -D
#        "__SOURCEFILE__=\"icmp-cli.c\"" -D BOARD_DEV0680ETM -D
#        "EMBER_AF_API_EMBER_TYPES=\"stack/include/ember-types.h\"" -D
#        EMBER_STACK_IP -D EMBER_RIP_STACK -D HAVE_TLS_JPAKE -D
#        DEBUG_LEVEL=FULL_DEBUG -D
#        "APPLICATION_TOKEN_HEADER=\"thread-token.h\"" -lC
#        C:\SiliconLabs\Thread-1.0.1\app\Thread_Sample_Server\build\lst\
#        --diag_suppress Pa050 -o
#        C:\SiliconLabs\Thread-1.0.1\app\Thread_Sample_Server\build\obj\
#        --debug --endian=little --cpu=Cortex-M3 --no_path_in_file_macros
#        --separate_cluster_for_initialized_variables -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\SiliconLabs\Thread-1.0.1\app\thread\plugin\icmp-cli\ -I
#        C:\SiliconLabs\Thread-1.0.1\app\Thread_Sample_Server\ -I
#        C:\SiliconLabs\Thread-1.0.1\app\Thread_Sample_Server\..\..\ -I
#        C:\SiliconLabs\Thread-1.0.1\app\Thread_Sample_Server\..\..\app\util\
#        -I C:\SiliconLabs\Thread-1.0.1\app\Thread_Sample_Server\..\..\stack\
#        -I C:\SiliconLabs\Thread-1.0.1\app\Thread_Sample_Server\..\..\hal\ -I
#        C:\SiliconLabs\Thread-1.0.1\app\Thread_Sample_Server\..\..\hal\..\
#        -Ohz --use_c++_inline
#    List file    =  
#        C:\SiliconLabs\Thread-1.0.1\app\Thread_Sample_Server\build\lst\icmp-cli.lst
#    Object file  =  
#        C:\SiliconLabs\Thread-1.0.1\app\Thread_Sample_Server\build\obj\icmp-cli.o
#
###############################################################################

C:\SiliconLabs\Thread-1.0.1\app\thread\plugin\icmp-cli\icmp-cli.c
      1          // Copyright 2015 Silicon Laboratories, Inc.
      2          
      3          #include PLATFORM_HEADER
      4          #include CONFIGURATION_HEADER
      5          #include EMBER_AF_API_STACK
      6          #include EMBER_AF_API_HAL
      7          #include EMBER_AF_API_COMMAND_INTERPRETER2
      8          #ifdef EMBER_AF_API_DEBUG_PRINT
      9            #include EMBER_AF_API_DEBUG_PRINT
     10          #endif
     11          
     12          // icmp listen <address>

   \                                 In section .text, align 2, keep-with-next
     13          void icmpListenCommand(void)
     14          {
   \                     icmpListenCommand: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
     15            EmberIpv6Address address;
     16            EmberStatus status;
     17          
     18            if (!emberGetIpArgument(0, address.bytes)) {
   \   00000004   0xA900             ADD      R1,SP,#+0
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x.... 0x....      BL       emberGetIpArgument
   \   0000000C   0xB928             CBNZ.N   R0,??icmpListenCommand_0
     19              emberAfAppPrintln("%p: %p", "ERR", "invalid ip");
   \   0000000E   0x.... 0x....      ADR.W    R3,?_2
   \   00000012   0x.... 0x....      ADR.W    R1,?_0
   \   00000016   0x....             ADR.N    R2,??DataTable8  ;; "ERR"
   \   00000018   0xE007             B.N      ??icmpListenCommand_1
     20              return;
     21            }
     22          
     23            status = emberIcmpListen(address.bytes);
   \                     ??icmpListenCommand_0: (+1)
   \   0000001A   0xA800             ADD      R0,SP,#+0
   \   0000001C   0x.... 0x....      BL       emberIcmpListen
     24            emberAfAppPrintln("%p 0x%x", "listen", status);
   \   00000020   0x4603             MOV      R3,R0
   \   00000022   0x.... 0x....      ADR.W    R2,?_4
   \   00000026   0x.... 0x....      ADR.W    R1,?_3
   \                     ??icmpListenCommand_1: (+1)
   \   0000002A   0x2002             MOVS     R0,#+2
   \   0000002C   0x.... 0x....      BL       emberAfPrintln
     25          }
   \   00000030   0xB005             ADD      SP,SP,#+20
   \   00000032   0xBD00             POP      {PC}             ;; return
     26          
     27          // icmp ping <destination> [<id:2> <sequence:2> <length:2> <hop limit:2>]

   \                                 In section .text, align 2, keep-with-next
     28          void icmpPingCommand(void)
     29          {
   \                     icmpPingCommand: (+1)
   \   00000000   0xE92D 0x43F0      PUSH     {R4-R9,LR}
   \   00000004   0xB085             SUB      SP,SP,#+20
     30            EmberIpv6Address destination;
     31            uint16_t id = 0xABCD;
     32            uint16_t sequence = 0x1234;
     33            uint16_t length = 0;
   \   00000006   0x2600             MOVS     R6,#+0
   \   00000008   0xF64A 0x34CD      MOVW     R4,#+43981
   \   0000000C   0xF241 0x2534      MOVW     R5,#+4660
     34            uint16_t hopLimit = 0;
   \   00000010   0x2700             MOVS     R7,#+0
     35            bool success;
     36          
     37            if (!emberGetIpArgument(0, destination.bytes)) {
   \   00000012   0x.... 0x....      ADR.W    R8,?_0
   \   00000016   0x.... 0x....      ADR.W    R9,??DataTable8  ;; "ERR"
   \   0000001A   0xA901             ADD      R1,SP,#+4
   \   0000001C   0x4630             MOV      R0,R6
   \   0000001E   0x.... 0x....      BL       emberGetIpArgument
   \   00000022   0xB910             CBNZ.N   R0,??icmpPingCommand_0
     38              emberAfAppPrintln("%p: %p", "ERR", "invalid ip");
   \   00000024   0x.... 0x....      ADR.W    R3,?_2
   \   00000028   0xE009             B.N      ??icmpPingCommand_1
     39              return;
     40            }
     41          
     42            if (emberCommandArgumentCount() > 1) {
   \                     ??icmpPingCommand_0: (+1)
   \   0000002A   0x.... 0x....      BL       emberCommandArgumentCount
   \   0000002E   0x2802             CMP      R0,#+2
   \   00000030   0xDB18             BLT.N    ??icmpPingCommand_2
     43              if (emberCommandArgumentCount() != 5) {
   \   00000032   0x.... 0x....      BL       emberCommandArgumentCount
   \   00000036   0x2805             CMP      R0,#+5
   \   00000038   0xD004             BEQ.N    ??icmpPingCommand_3
     44                emberAfAppPrintln("%p: %p", "ERR", "expected <id:2> <sequence:2> <length:2> <hop limit:2>");
   \   0000003A   0x.... 0x....      ADR.W    R3,?_5
   \                     ??icmpPingCommand_1: (+1)
   \   0000003E   0x464A             MOV      R2,R9
   \   00000040   0x4641             MOV      R1,R8
   \   00000042   0xE01D             B.N      ??icmpPingCommand_4
     45                return;
     46              }
     47              id = (uint16_t)emberUnsignedCommandArgument(1);
   \                     ??icmpPingCommand_3: (+1)
   \   00000044   0x2001             MOVS     R0,#+1
   \   00000046   0x.... 0x....      BL       emberUnsignedCommandArgument
   \   0000004A   0x4604             MOV      R4,R0
     48              sequence = (uint16_t)emberUnsignedCommandArgument(2);
   \   0000004C   0x2002             MOVS     R0,#+2
   \   0000004E   0x.... 0x....      BL       emberUnsignedCommandArgument
   \   00000052   0x4605             MOV      R5,R0
     49              length = (uint16_t)emberUnsignedCommandArgument(3);
   \   00000054   0x2003             MOVS     R0,#+3
   \   00000056   0x.... 0x....      BL       emberUnsignedCommandArgument
   \   0000005A   0x4606             MOV      R6,R0
     50              hopLimit = (uint16_t)emberUnsignedCommandArgument(4);
   \   0000005C   0x2004             MOVS     R0,#+4
   \   0000005E   0x.... 0x....      BL       emberUnsignedCommandArgument
   \   00000062   0x4607             MOV      R7,R0
     51            }
     52          
     53            success = emberIpPing(destination.bytes, id, sequence, length, hopLimit);
   \                     ??icmpPingCommand_2: (+1)
   \   00000064   0xB2FF             UXTB     R7,R7
   \   00000066   0x9700             STR      R7,[SP, #+0]
   \   00000068   0xB2B3             UXTH     R3,R6
   \   0000006A   0xB2AA             UXTH     R2,R5
   \   0000006C   0xB2A1             UXTH     R1,R4
   \   0000006E   0xA801             ADD      R0,SP,#+4
   \   00000070   0x.... 0x....      BL       emberIpPing
     54            emberAfAppPrintln("%p 0x%x", "ping",
     55                              (success ? EMBER_SUCCESS : EMBER_ERR_FATAL));
   \   00000074   0xF080 0x0301      EOR      R3,R0,#0x1
   \   00000078   0x.... 0x....      ADR.W    R2,?_6
   \   0000007C   0x.... 0x....      ADR.W    R1,?_3
   \                     ??icmpPingCommand_4: (+1)
   \   00000080   0x2002             MOVS     R0,#+2
   \   00000082   0x.... 0x....      BL       emberAfPrintln
     56          }
   \   00000086   0xB005             ADD      SP,SP,#+20
   \   00000088   0xE8BD 0x83F0      POP      {R4-R9,PC}       ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8:
   \   00000000   0x45 0x52          DC8      "ERR"
   \              0x52 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x25 0x70          DC8 "%p: %p"
   \              0x3A 0x20    
   \              0x25 0x70    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_1:
   \   00000000   0x45 0x52          DC8 "ERR"
   \              0x52 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_2:
   \   00000000   0x69 0x6E          DC8 "invalid ip"
   \              0x76 0x61    
   \              0x6C 0x69    
   \              0x64 0x20    
   \              0x69 0x70    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_3:
   \   00000000   0x25 0x70          DC8 "%p 0x%x"
   \              0x20 0x30    
   \              0x78 0x25    
   \              0x78 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_4:
   \   00000000   0x6C 0x69          DC8 "listen"
   \              0x73 0x74    
   \              0x65 0x6E    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_5:
   \   00000000   0x65 0x78          DC8 65H, 78H, 70H, 65H, 63H, 74H, 65H, 64H
   \              0x70 0x65    
   \              0x63 0x74    
   \              0x65 0x64    
   \   00000008   0x20 0x3C          DC8 20H, 3CH, 69H, 64H, 3AH, 32H, 3EH, 20H
   \              0x69 0x64    
   \              0x3A 0x32    
   \              0x3E 0x20    
   \   00000010   0x3C 0x73          DC8 3CH, 73H, 65H, 71H, 75H, 65H, 6EH, 63H
   \              0x65 0x71    
   \              0x75 0x65    
   \              0x6E 0x63    
   \   00000018   0x65 0x3A          DC8 65H, 3AH, 32H, 3EH, 20H, 3CH, 6CH, 65H
   \              0x32 0x3E    
   \              0x20 0x3C    
   \              0x6C 0x65    
   \   00000020   0x6E 0x67          DC8 6EH, 67H, 74H, 68H, 3AH, 32H, 3EH, 20H
   \              0x74 0x68    
   \              0x3A 0x32    
   \              0x3E 0x20    
   \   00000028   0x3C 0x68          DC8 3CH, 68H, 6FH, 70H, 20H, 6CH, 69H, 6DH
   \              0x6F 0x70    
   \              0x20 0x6C    
   \              0x69 0x6D    
   \   00000030   0x69 0x74          DC8 69H, 74H, 3AH, 32H, 3EH, 0
   \              0x3A 0x32    
   \              0x3E 0x00    
   \   00000036   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_6:
   \   00000000   0x70 0x69          DC8 "ping"
   \              0x6E 0x67    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      24   icmpListenCommand
        24   -> emberAfPrintln
        24   -> emberGetIpArgument
        24   -> emberIcmpListen
      48   icmpPingCommand
        48   -> emberAfPrintln
        48   -> emberCommandArgumentCount
        48   -> emberGetIpArgument
        48   -> emberIpPing
        48   -> emberUnsignedCommandArgument


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable8
       8  ?_0
       4  ?_1
      12  ?_2
       8  ?_3
       8  ?_4
      56  ?_5
       8  ?_6
      52  icmpListenCommand
     140  icmpPingCommand

 
   4 bytes in section .rodata
 296 bytes in section .text
 
 296 bytes of CODE  memory
   4 bytes of CONST memory

Errors: none
Warnings: none
