###############################################################################
#
# IAR ANSI C/C++ Compiler V7.30.1.7746/W32 for ARM        28/Sep/2015  13:29:34
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\SiliconLabs\Thread-1.0.1\app\util\bootload\tftp-bootloader\server\tftp-bootloader-server.c
#    Command line =  
#        C:\SiliconLabs\Thread-1.0.1\app\util\bootload\tftp-bootloader\server\tftp-bootloader-server.c
#        -D APP_BTL -D CORTEXM3 -D CORTEXM3_EMBER_MICRO -D CORTEXM3_EM3588 -D
#        PHY_EM3XX -D "BOARD_HEADER=\"thread-board.h\"" -D
#        "CONFIGURATION_HEADER=\"thread-configuration.h\"" -D
#        "PLATFORM_HEADER=\"hal/micro/cortexm3/compiler/iar.h\"" -D
#        "__SOURCEFILE__=\"tftp-bootloader-server.c\"" -D BOARD_DEV0680ETM -D
#        "EMBER_AF_API_EMBER_TYPES=\"stack/include/ember-types.h\"" -D
#        EMBER_STACK_IP -D EMBER_RIP_STACK -D HAVE_TLS_JPAKE -D
#        DEBUG_LEVEL=FULL_DEBUG -D
#        "APPLICATION_TOKEN_HEADER=\"thread-token.h\"" -lC
#        C:\SiliconLabs\Thread-1.0.1\app\Thread_Sample_Server\build\lst\
#        --diag_suppress Pa050 -o
#        C:\SiliconLabs\Thread-1.0.1\app\Thread_Sample_Server\build\obj\
#        --debug --endian=little --cpu=Cortex-M3 --no_path_in_file_macros
#        --separate_cluster_for_initialized_variables -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\SiliconLabs\Thread-1.0.1\app\util\bootload\tftp-bootloader\server\
#        -I C:\SiliconLabs\Thread-1.0.1\app\Thread_Sample_Server\ -I
#        C:\SiliconLabs\Thread-1.0.1\app\Thread_Sample_Server\..\..\ -I
#        C:\SiliconLabs\Thread-1.0.1\app\Thread_Sample_Server\..\..\app\util\
#        -I C:\SiliconLabs\Thread-1.0.1\app\Thread_Sample_Server\..\..\stack\
#        -I C:\SiliconLabs\Thread-1.0.1\app\Thread_Sample_Server\..\..\hal\ -I
#        C:\SiliconLabs\Thread-1.0.1\app\Thread_Sample_Server\..\..\hal\..\
#        -Ohz --use_c++_inline
#    List file    =  
#        C:\SiliconLabs\Thread-1.0.1\app\Thread_Sample_Server\build\lst\tftp-bootloader-server.lst
#    Object file  =  
#        C:\SiliconLabs\Thread-1.0.1\app\Thread_Sample_Server\build\obj\tftp-bootloader-server.o
#
###############################################################################

C:\SiliconLabs\Thread-1.0.1\app\util\bootload\tftp-bootloader\server\tftp-bootloader-server.c
      1          // File: tftp-bootloader-server.c
      2          //
      3          // Description: TftpBootloader Server Functionality
      4          //
      5          // Copyright 2013 by Silicon Laboratories. All rights reserved.             *80*
      6          
      7          #include PLATFORM_HEADER
      8          #include "stack/include/ember.h"
      9          #include "stack/core/log.h"
     10          #include "stack/framework/buffer-management.h"
     11          #include "hal/hal.h"
     12          #include "app/util/serial/serial.h"
     13          #include "app/util/bootload/tftp/server/tftp-server.h"
     14          #include "app/util/bootload/tftp-bootloader/tftp-bootloader.h"
     15          
     16          typedef enum {
     17            NO_BOOTLOAD_ACTION,
     18            ERASE_BOOTLOADER_IMAGE,
     19            INSTALL_BOOTLOAD_IMAGE_INIT,
     20            INSTALL_BOOTLOAD_IMAGE
     21          } BootloadAction;
     22          
     23          static uint32_t bootloadEraseAddress = 0;
     24          static BootloadAction bootloadAction = NO_BOOTLOAD_ACTION;
     25          void emBootloadEventHandler(void);
     26          EmberEventControl emBootloadEvent = {0, 0};
     27          

   \                                 In section .text, align 2, keep-with-next
     28          void emInitializeTftpBootloader(void)
     29          {
   \                     emInitializeTftpBootloader: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
     30            emInitializeBaseTftpBootloaderFunctionality();
   \   00000002   0x.... 0x....      BL       emInitializeBaseTftpBootloaderFunctionality
     31          
     32            if (halAppBootloaderInit() == EEPROM_SUCCESS) {
   \   00000006   0x.... 0x....      BL       halAppBootloaderInit
   \   0000000A   0xB980             CBNZ.N   R0,??emInitializeTftpBootloader_0
     33              const HalEepromInformationType *info = halAppBootloaderInfo();
   \   0000000C   0x.... 0x....      BL       halAppBootloaderInfo
   \   00000010   0x0004             MOVS     R4,R0
     34              assert(info != NULL);
   \   00000012   0xD104             BNE.N    ??emInitializeTftpBootloader_1
   \   00000014   0x2122             MOVS     R1,#+34
   \   00000016   0x.... 0x....      ADR.W    R0,?_0
   \   0000001A   0x.... 0x....      BL       halInternalAssertFailed
     35              emberSerialPrintfLine(APP_SERIAL,
     36                                    "Bootloader version %u",
     37                                    info->version);
   \                     ??emInitializeTftpBootloader_1: (+1)
   \   0000001E   0x8822             LDRH     R2,[R4, #+0]
   \   00000020   0x.... 0x....      ADR.W    R1,?_1
   \   00000024   0xE8BD 0x4010      POP      {R4,LR}
   \   00000028   0x2001             MOVS     R0,#+1
   \   0000002A   0x.... 0x....      B.W      emberSerialPrintfLine
     38            } else {
     39              emberSerialPrintfLine(APP_SERIAL,
     40                                    "warning: unable to initialize bootloader");
   \                     ??emInitializeTftpBootloader_0: (+1)
   \   0000002E   0xE8BD 0x4010      POP      {R4,LR}
   \   00000032   0x.... 0x....      ADR.W    R1,?_2
   \   00000036   0x2001             MOVS     R0,#+1
   \   00000038   0x.... 0x....      B.W      emberSerialPrintfLine
     41            }   
     42          }
     43          

   \                                 In section .text, align 2, keep-with-next
     44          void emMarkTftpBootloaderBuffers(void)
     45          {
     46            emMarkBuffer(&emTftpBootloaderRemoteAddress);
   \                     emMarkTftpBootloaderBuffers: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable29_2
   \   00000002   0x.... 0x....      B.W      emMarkBuffer
     47          }
     48          
     49          #ifndef EMBER_AF_PLUGIN_TFTP_BOOTLOAD_TARGET
     50          // When running as a plugin, emBootloadEvent is run by the framework.
     51          static EmberEventData appEvents[] = {
     52            {&emBootloadEvent, emBootloadEventHandler},
     53            {NULL, NULL}
     54          };
     55          
     56          void emRunTftpBootloaderEvents(void)
     57          {
     58            emberRunEvents(appEvents);
     59          }
     60          #endif
     61          

   \                                 In section .text, align 2, keep-with-next
     62          static bool sendOkayToSend(bool success,
     63                                        bool holdOff,
     64                                        uint32_t fileIndex)
     65          {
   \                     sendOkayToSend: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB086             SUB      SP,SP,#+24
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0x460D             MOV      R5,R1
   \   00000008   0x4616             MOV      R6,R2
     66            uint8_t packet[7] = {0};
   \   0000000A   0xA803             ADD      R0,SP,#+12
   \   0000000C   0x2100             MOVS     R1,#+0
   \   0000000E   0x2200             MOVS     R2,#+0
   \   00000010   0xC006             STM      R0!,{R1,R2}
     67            packet[0] = KRAKEN_OKAY_TO_SEND;
   \   00000012   0x2002             MOVS     R0,#+2
   \   00000014   0xF88D 0x000C      STRB     R0,[SP, #+12]
     68            packet[1] = success;
   \   00000018   0xF88D 0x400D      STRB     R4,[SP, #+13]
     69            packet[2] = holdOff;
   \   0000001C   0xF88D 0x500E      STRB     R5,[SP, #+14]
     70            emberStoreHighLowInt32u(packet + 3, fileIndex);
   \   00000020   0x4632             MOV      R2,R6
   \   00000022   0xF10D 0x010F      ADD      R1,SP,#+15
   \   00000026   0x2000             MOVS     R0,#+0
   \   00000028   0x.... 0x....      BL       emStoreInt32u
     71          
     72            emLogLine(BOOTLOAD,
     73                      "sending okay to send | success: %s | holdOff: %u | fileIndex: %u",
     74                      (success
     75                       ? "yes"
     76                       : "no"),
     77                      holdOff,
     78                      fileIndex);
   \   0000002C   0x2C00             CMP      R4,#+0
   \   0000002E   0xBF14             ITE      NE 
   \   00000030   0x....             ADRNE.N  R2,??DataTable29  ;; "yes"
   \   00000032   0x....             ADREQ.N  R2,??DataTable29_1  ;; 0x6E, 0x6F, 0x00, 0x00
   \   00000034   0x9600             STR      R6,[SP, #+0]
   \   00000036   0x462B             MOV      R3,R5
   \   00000038   0x.... 0x....      ADR.W    R1,?_3
   \   0000003C   0x2017             MOVS     R0,#+23
   \   0000003E   0x.... 0x....      BL       emReallyLogLine
     79          
     80            return emberSendUdp(0,
     81                                emGetTftpBootloaderRemoteAddress()->bytes,
     82                                255,
     83                                TFTP_BOOTLOADER_PORT,
     84                                TFTP_BOOTLOADER_PORT,
     85                                packet,
     86                                sizeof(packet));
   \   00000042   0x.... 0x....      BL       emGetTftpBootloaderRemoteAddress
   \   00000046   0x4601             MOV      R1,R0
   \   00000048   0x2007             MOVS     R0,#+7
   \   0000004A   0x9002             STR      R0,[SP, #+8]
   \   0000004C   0x2344             MOVS     R3,#+68
   \   0000004E   0xA803             ADD      R0,SP,#+12
   \   00000050   0x9001             STR      R0,[SP, #+4]
   \   00000052   0x22FF             MOVS     R2,#+255
   \   00000054   0x2044             MOVS     R0,#+68
   \   00000056   0x9000             STR      R0,[SP, #+0]
   \   00000058   0x2000             MOVS     R0,#+0
   \   0000005A   0x.... 0x....      BL       emberSendUdp
   \   0000005E   0xB100             CBZ.N    R0,??sendOkayToSend_0
   \   00000060   0x2001             MOVS     R0,#+1
   \                     ??sendOkayToSend_0: (+1)
   \   00000062   0xB006             ADD      SP,SP,#+24
   \   00000064   0xBD70             POP      {R4-R6,PC}       ;; return
     87          }

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_22:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    

   \                                 In section .bss, align 4
   \                     bootloadAction:
   \   00000000                      DS8 1
   \   00000001                      DS8 3
   \                     emBootloadEvent:
   \   00000004                      DS8 8
   \   0000000C                      DS8 4
   \   00000010                      DS8 4
     88          
     89          static uint32_t nextFileIndex = 0;
     90          

   \                                 In section .text, align 2, keep-with-next
     91          void emBootloadEventHandler(void)
     92          {
   \                     emBootloadEventHandler: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
     93            switch (bootloadAction) {
   \   00000002   0x....             LDR.N    R4,??DataTable29_3
   \   00000004   0x.... 0x....      ADR.W    R5,?_0
   \   00000008   0x7820             LDRB     R0,[R4, #+0]
   \   0000000A   0x2801             CMP      R0,#+1
   \   0000000C   0xD004             BEQ.N    ??emBootloadEventHandler_0
   \   0000000E   0xD360             BCC.N    ??emBootloadEventHandler_1
   \   00000010   0x2803             CMP      R0,#+3
   \   00000012   0xD03C             BEQ.N    ??emBootloadEventHandler_2
   \   00000014   0xD337             BCC.N    ??emBootloadEventHandler_3
   \   00000016   0xE05C             B.N      ??emBootloadEventHandler_1
     94            case ERASE_BOOTLOADER_IMAGE: {
     95              emberEventControlSetActive(emBootloadEvent);
   \                     ??emBootloadEventHandler_0: (+1)
   \   00000018   0x1D20             ADDS     R0,R4,#+4
   \   0000001A   0x.... 0x....      BL       emEventControlSetActive
     96          
     97              if (halAppBootloaderStorageBusy()) {
   \   0000001E   0x.... 0x....      BL       halAppBootloaderStorageBusy
   \   00000022   0x2800             CMP      R0,#+0
   \   00000024   0xD15B             BNE.N    ??emBootloadEventHandler_4
     98                return;
     99              }
    100          
    101              const HalEepromInformationType *info = halAppBootloaderInfo();
   \   00000026   0x.... 0x....      BL       halAppBootloaderInfo
   \   0000002A   0x0006             MOVS     R6,R0
    102              assert(info != NULL);
   \   0000002C   0xD103             BNE.N    ??emBootloadEventHandler_5
   \   0000002E   0x2166             MOVS     R1,#+102
   \   00000030   0x4628             MOV      R0,R5
   \   00000032   0x.... 0x....      BL       halInternalAssertFailed
    103              assert(bootloadEraseAddress <= info->partSize);
   \                     ??emBootloadEventHandler_5: (+1)
   \   00000036   0x68F0             LDR      R0,[R6, #+12]
   \   00000038   0x68E1             LDR      R1,[R4, #+12]
   \   0000003A   0x4288             CMP      R0,R1
   \   0000003C   0xD203             BCS.N    ??emBootloadEventHandler_6
   \   0000003E   0x2167             MOVS     R1,#+103
   \   00000040   0x4628             MOV      R0,R5
   \   00000042   0x.... 0x....      BL       halInternalAssertFailed
    104          
    105              if (bootloadEraseAddress < info->partSize) {
   \                     ??emBootloadEventHandler_6: (+1)
   \   00000046   0x68E0             LDR      R0,[R4, #+12]
   \   00000048   0x68F1             LDR      R1,[R6, #+12]
   \   0000004A   0x4288             CMP      R0,R1
   \   0000004C   0xD20D             BCS.N    ??emBootloadEventHandler_7
    106                halAppBootloaderEraseRawStorage(bootloadEraseAddress, info->pageSize);
   \   0000004E   0x68B1             LDR      R1,[R6, #+8]
   \   00000050   0x.... 0x....      BL       halAppBootloaderEraseRawStorage
    107                emLogLine(BOOTLOAD,
    108                          "TftpBootloader erasing page at address: %u",
    109                          bootloadEraseAddress);
   \   00000054   0x68E2             LDR      R2,[R4, #+12]
   \   00000056   0x.... 0x....      ADR.W    R1,?_6
   \   0000005A   0x2017             MOVS     R0,#+23
   \   0000005C   0x.... 0x....      BL       emReallyLogLine
    110                bootloadEraseAddress += info->pageSize;
   \   00000060   0x68E0             LDR      R0,[R4, #+12]
   \   00000062   0x68B1             LDR      R1,[R6, #+8]
   \   00000064   0x1808             ADDS     R0,R1,R0
   \   00000066   0x60E0             STR      R0,[R4, #+12]
   \   00000068   0xBD70             POP      {R4-R6,PC}
    111              } else {
    112                bootloadAction = NO_BOOTLOAD_ACTION;
   \                     ??emBootloadEventHandler_7: (+1)
   \   0000006A   0x2000             MOVS     R0,#+0
   \   0000006C   0x7020             STRB     R0,[R4, #+0]
    113                emberEventControlSetInactive(emBootloadEvent);
   \   0000006E   0x7120             STRB     R0,[R4, #+4]
    114                emLogLine(BOOTLOAD, "Done erasing storage");
   \   00000070   0x2017             MOVS     R0,#+23
   \   00000072   0x.... 0x....      ADR.W    R1,?_7
   \   00000076   0x.... 0x....      BL       emReallyLogLine
    115                sendOkayToSend(true, false, nextFileIndex);
   \   0000007A   0x6922             LDR      R2,[R4, #+16]
   \   0000007C   0xE8BD 0x4070      POP      {R4-R6,LR}
   \   00000080   0x2100             MOVS     R1,#+0
   \   00000082   0x2001             MOVS     R0,#+1
   \   00000084   0x....             B.N      sendOkayToSend
    116              }
    117              break;
    118            }
    119            case INSTALL_BOOTLOAD_IMAGE_INIT:
    120              halAppBootloaderImageIsValidReset();
   \                     ??emBootloadEventHandler_3: (+1)
   \   00000086   0x.... 0x....      BL       halAppBootloaderImageIsValidReset
    121              bootloadAction = INSTALL_BOOTLOAD_IMAGE;
   \   0000008A   0x2003             MOVS     R0,#+3
   \   0000008C   0x7020             STRB     R0,[R4, #+0]
    122              // fall through
    123            case INSTALL_BOOTLOAD_IMAGE: {
    124              uint16_t result = halAppBootloaderImageIsValid();
   \                     ??emBootloadEventHandler_2: (+1)
   \   0000008E   0x.... 0x....      BL       halAppBootloaderImageIsValid
    125          
    126              if (result == BL_IMAGE_IS_VALID_CONTINUE) {
   \   00000092   0xF64F 0x71FF      MOVW     R1,#+65535
   \   00000096   0x4288             CMP      R0,R1
   \   00000098   0xD104             BNE.N    ??emBootloadEventHandler_8
    127                emberEventControlSetActive(emBootloadEvent);
   \   0000009A   0x1D20             ADDS     R0,R4,#+4
   \   0000009C   0xE8BD 0x4070      POP      {R4-R6,LR}
   \   000000A0   0x.... 0x....      B.W      emEventControlSetActive
    128                return;
    129              }
    130          
    131              if (result > 0) {
   \                     ??emBootloadEventHandler_8: (+1)
   \   000000A4   0xB160             CBZ.N    R0,??emBootloadEventHandler_9
    132                if (emLogIsActive(EM_LOG_BOOTLOAD)) {
   \   000000A6   0x2017             MOVS     R0,#+23
   \   000000A8   0x.... 0x....      BL       emLogIsActive
   \   000000AC   0xB120             CBZ.N    R0,??emBootloadEventHandler_10
    133                  emberSerialGuaranteedPrintf(APP_SERIAL, "Image is valid, rebooting\n");
   \   000000AE   0x.... 0x....      ADR.W    R1,?_8
   \   000000B2   0x2001             MOVS     R0,#+1
   \   000000B4   0x.... 0x....      BL       emberSerialGuaranteedPrintf
    134                }
    135                halAppBootloaderInstallNewImage();
   \                     ??emBootloadEventHandler_10: (+1)
   \   000000B8   0xE8BD 0x4070      POP      {R4-R6,LR}
   \   000000BC   0x.... 0x....      B.W      halAppBootloaderInstallNewImage
    136              } else {
    137                emLogLine(BOOTLOAD,
    138                          "warning: bootload image is not valid: %u",
    139                          result);
   \                     ??emBootloadEventHandler_9: (+1)
   \   000000C0   0x2200             MOVS     R2,#+0
   \   000000C2   0x.... 0x....      ADR.W    R1,?_9
   \   000000C6   0x2017             MOVS     R0,#+23
   \   000000C8   0x.... 0x....      BL       emReallyLogLine
    140                emberEventControlSetInactive(emBootloadEvent);
   \   000000CC   0x2000             MOVS     R0,#+0
   \   000000CE   0x7120             STRB     R0,[R4, #+4]
   \   000000D0   0xBD70             POP      {R4-R6,PC}
    141              }
    142              break;
    143            }
    144            default:
    145              // shouldn't get here
    146              assert(false);
   \                     ??emBootloadEventHandler_1: (+1)
   \   000000D2   0x4628             MOV      R0,R5
   \   000000D4   0xE8BD 0x4070      POP      {R4-R6,LR}
   \   000000D8   0x2192             MOVS     R1,#+146
   \   000000DA   0x.... 0x....      B.W      halInternalAssertFailed
    147            }
    148          }
   \                     ??emBootloadEventHandler_4: (+1)
   \   000000DE   0xBD70             POP      {R4-R6,PC}       ;; return
    149          

   \                                 In section .text, align 2, keep-with-next
    150          void emTftpServerStatusHandler(TftpServerStatus status)
    151          {
   \                     emTftpServerStatusHandler: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    152            if (status == TFTP_FILE_WRITE_REQUEST) {
   \   00000002   0xB930             CBNZ.N   R0,??emTftpServerStatusHandler_0
    153              // start erasing the bootload image area
    154              // TODO: add the functionality below to tftp-bootloader support
    155              //bootloadAction = ERASE_BOOTLOADER_IMAGE;
    156              //emberEventControlSetActive(bootloadEvent);
    157              emLogLine(BOOTLOAD, "TFTP write request");
   \   00000004   0xE8BD 0x4010      POP      {R4,LR}
   \   00000008   0x.... 0x....      ADR.W    R1,?_10
   \   0000000C   0x2017             MOVS     R0,#+23
   \   0000000E   0x.... 0x....      B.W      emReallyLogLine
    158            } else if (status == TFTP_FILE_DONE) {
   \                     ??emTftpServerStatusHandler_0: (+1)
   \   00000012   0x2801             CMP      R0,#+1
   \   00000014   0xD10B             BNE.N    ??emTftpServerStatusHandler_1
    159              bootloadAction = INSTALL_BOOTLOAD_IMAGE_INIT;
   \   00000016   0x....             LDR.N    R4,??DataTable29_3
    160              emLogLine(BOOTLOAD, "Attempting to install new image");
   \   00000018   0x.... 0x....      ADR.W    R1,?_11
   \   0000001C   0x2002             MOVS     R0,#+2
   \   0000001E   0x7020             STRB     R0,[R4, #+0]
   \   00000020   0x.... 0x....      BL       ?Subroutine0
    161              emberEventControlSetActive(emBootloadEvent);
   \                     ??CrossCallReturnLabel_5: (+1)
   \   00000024   0x1D20             ADDS     R0,R4,#+4
   \   00000026   0xE8BD 0x4010      POP      {R4,LR}
   \   0000002A   0x.... 0x....      B.W      emEventControlSetActive
    162            }
    163          }
   \                     ??emTftpServerStatusHandler_1: (+1)
   \   0000002E   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \   00000000   0x2017             MOVS     R0,#+23
   \   00000002   0x.... 0x....      B.W      emReallyLogLine
    164          

   \                                 In section .text, align 2, keep-with-next
    165          bool emStoreTftpFileChunk(uint32_t index, const uint8_t *data, uint16_t length)
    166          {
   \                     emStoreTftpFileChunk: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
   \   00000006   0x4616             MOV      R6,R2
    167            emLogLine(BOOTLOAD,
    168                      "[TFTP RX %u bytes @ index %u]\n",
    169                      length,
    170                      index);
   \   00000008   0x4623             MOV      R3,R4
   \   0000000A   0x.... 0x....      ADR.W    R1,?_12
   \   0000000E   0x2017             MOVS     R0,#+23
   \   00000010   0x.... 0x....      BL       emReallyLogLine
    171          
    172            if (halAppBootloaderStorageBusy()) {
   \   00000014   0x.... 0x....      BL       halAppBootloaderStorageBusy
   \   00000018   0xB128             CBZ.N    R0,??emStoreTftpFileChunk_0
    173              emLogLine(BOOTLOAD, "Warning: storage is busy");
   \   0000001A   0x.... 0x....      ADR.W    R1,?_13
   \   0000001E   0x.... 0x....      BL       ?Subroutine0
    174              return false;
   \                     ??CrossCallReturnLabel_4: (+1)
   \   00000022   0x2000             MOVS     R0,#+0
   \   00000024   0xBDF2             POP      {R1,R4-R7,PC}
    175            } else {
    176              uint8_t writeResult =
    177                halAppBootloaderWriteRawStorage(nextFileIndex, data, length);
   \                     ??emStoreTftpFileChunk_0: (+1)
   \   00000026   0x....             LDR.N    R7,??DataTable29_3
   \   00000028   0x6938             LDR      R0,[R7, #+16]
   \   0000002A   0x4632             MOV      R2,R6
   \   0000002C   0x4629             MOV      R1,R5
   \   0000002E   0x.... 0x....      BL       halAppBootloaderWriteRawStorage
    178          
    179              if (writeResult == EEPROM_SUCCESS) {
   \   00000032   0xB918             CBNZ.N   R0,??emStoreTftpFileChunk_1
    180                nextFileIndex += length;
   \   00000034   0x6938             LDR      R0,[R7, #+16]
   \   00000036   0x1830             ADDS     R0,R6,R0
   \   00000038   0x6138             STR      R0,[R7, #+16]
   \   0000003A   0xE006             B.N      ??emStoreTftpFileChunk_2
    181              } else {
    182                emLogLine(BOOTLOAD,
    183                          "[failed to write image at index %u, "
    184                          "code: %u]\n",
    185                          index,
    186                          writeResult);
   \                     ??emStoreTftpFileChunk_1: (+1)
   \   0000003C   0x4603             MOV      R3,R0
   \   0000003E   0x4622             MOV      R2,R4
   \   00000040   0x.... 0x....      ADR.W    R1,?_14
   \   00000044   0x2017             MOVS     R0,#+23
   \   00000046   0x.... 0x....      BL       emReallyLogLine
    187              }
    188            }
    189          
    190            return true;
   \                     ??emStoreTftpFileChunk_2: (+1)
   \   0000004A   0x2001             MOVS     R0,#+1
   \   0000004C   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    191          }
    192          

   \                                 In section .text, align 2, keep-with-next
    193          void emHandleTftpBootloaderBootloadRequest(const uint8_t *source,
    194                                             const uint8_t *packet,
    195                                             uint16_t packetLength)
    196          {
   \                     emHandleTftpBootloaderBootloadRequest: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB084             SUB      SP,SP,#+16
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0x460D             MOV      R5,R1
   \   00000008   0x4616             MOV      R6,R2
    197            // do some fancy authentication on the request first
    198            TftpBootloaderBootloadRequest request = {0};
   \   0000000A   0xA800             ADD      R0,SP,#+0
   \   0000000C   0x2100             MOVS     R1,#+0
   \   0000000E   0x2200             MOVS     R2,#+0
   \   00000010   0x460B             MOV      R3,R1
   \   00000012   0xC00E             STM      R0!,{R1-R3}
    199            emLogLine(BOOTLOAD, "Received tftp-bootloader bootload request");
   \   00000014   0x.... 0x....      ADR.W    R1,?_15
   \   00000018   0x.... 0x....      BL       ?Subroutine0
    200          
    201            if (packetLength >= sizeof(TftpBootloaderBootloadRequest)) {
   \                     ??CrossCallReturnLabel_3: (+1)
   \   0000001C   0x2E0C             CMP      R6,#+12
   \   0000001E   0xD33D             BCC.N    ??emHandleTftpBootloaderBootloadRequest_0
    202              request.resume = packet[0];
   \   00000020   0x7828             LDRB     R0,[R5, #+0]
   \   00000022   0xB100             CBZ.N    R0,??emHandleTftpBootloaderBootloadRequest_1
   \   00000024   0x2001             MOVS     R0,#+1
   \                     ??emHandleTftpBootloaderBootloadRequest_1: (+1)
   \   00000026   0xF88D 0x0000      STRB     R0,[SP, #+0]
    203              request.manufacturerId = emberFetchHighLowInt16u(packet + 1);
   \   0000002A   0x1C68             ADDS     R0,R5,#+1
   \   0000002C   0x.... 0x....      BL       emberFetchHighLowInt16u
   \   00000030   0xF8AD 0x0002      STRH     R0,[SP, #+2]
    204              request.deviceType = packet[3];
    205              request.versionNumber = emberFetchHighLowInt32u(packet + 4);
   \   00000034   0x1D29             ADDS     R1,R5,#+4
   \   00000036   0x78E8             LDRB     R0,[R5, #+3]
   \   00000038   0xF88D 0x0004      STRB     R0,[SP, #+4]
   \   0000003C   0x2000             MOVS     R0,#+0
   \   0000003E   0x.... 0x....      BL       emFetchInt32u
   \   00000042   0x9002             STR      R0,[SP, #+8]
    206              emSetTftpBootloaderRemoteAddress(source);
   \   00000044   0x4620             MOV      R0,R4
   \   00000046   0x.... 0x....      BL       emSetTftpBootloaderRemoteAddress
    207          
    208              if (emberVerifyBootloadRequest(&request)) {
   \   0000004A   0xA800             ADD      R0,SP,#+0
   \   0000004C   0x.... 0x....      BL       emberVerifyBootloadRequest
   \   00000050   0xB1F8             CBZ.N    R0,??emHandleTftpBootloaderBootloadRequest_2
    209                if (! request.resume) {
   \   00000052   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000056   0x....             LDR.N    R4,??DataTable29_3
   \   00000058   0xB930             CBNZ.N   R0,??emHandleTftpBootloaderBootloadRequest_3
    210                  emLogLine(BOOTLOAD, "Reset file index");
   \   0000005A   0x.... 0x....      ADR.W    R1,?_16
   \   0000005E   0x.... 0x....      BL       ?Subroutine0
    211                  nextFileIndex = 0;
   \                     ??CrossCallReturnLabel_2: (+1)
   \   00000062   0x2000             MOVS     R0,#+0
   \   00000064   0x6120             STR      R0,[R4, #+16]
   \   00000066   0xE003             B.N      ??CrossCallReturnLabel_1
    212                } else {
    213                  emLogLine(BOOTLOAD, "Resume requested");
   \                     ??emHandleTftpBootloaderBootloadRequest_3: (+1)
   \   00000068   0x.... 0x....      ADR.W    R1,?_17
   \   0000006C   0x.... 0x....      BL       ?Subroutine0
    214                }
    215          
    216                // success
    217                emLogLine(BOOTLOAD, "Proceeding to erase image");
   \                     ??CrossCallReturnLabel_1: (+1)
   \   00000070   0x.... 0x....      ADR.W    R1,?_18
   \   00000074   0x.... 0x....      BL       ?Subroutine0
    218                emResetTftpServer();
   \                     ??CrossCallReturnLabel_0: (+1)
   \   00000078   0x.... 0x....      BL       emResetTftpServer
    219                sendOkayToSend(true, true, nextFileIndex);
   \   0000007C   0x6922             LDR      R2,[R4, #+16]
   \   0000007E   0x2101             MOVS     R1,#+1
   \   00000080   0x2001             MOVS     R0,#+1
   \   00000082   0x.... 0x....      BL       sendOkayToSend
    220                bootloadAction = ERASE_BOOTLOADER_IMAGE;
   \   00000086   0x2001             MOVS     R0,#+1
   \   00000088   0x7020             STRB     R0,[R4, #+0]
    221                emberEventControlSetActive(emBootloadEvent);
   \   0000008A   0x1D20             ADDS     R0,R4,#+4
   \   0000008C   0x.... 0x....      BL       emEventControlSetActive
   \   00000090   0xBD7F             POP      {R0-R6,PC}
    222              } else {
    223                // failure
    224                sendOkayToSend(false, false, 0);
   \                     ??emHandleTftpBootloaderBootloadRequest_2: (+1)
   \   00000092   0x2200             MOVS     R2,#+0
   \   00000094   0x2100             MOVS     R1,#+0
   \   00000096   0x.... 0x....      BL       sendOkayToSend
   \   0000009A   0xBD7F             POP      {R0-R6,PC}
    225              }
    226            } else {
    227              emLogLine(BOOTLOAD,
    228                        "bootload request failure, "
    229                        "%u bytes left but wanted %u",
    230                        packetLength,
    231                        sizeof(TftpBootloaderBootloadRequest));
   \                     ??emHandleTftpBootloaderBootloadRequest_0: (+1)
   \   0000009C   0x230C             MOVS     R3,#+12
   \   0000009E   0x4632             MOV      R2,R6
   \   000000A0   0x.... 0x....      ADR.W    R1,?_19
   \   000000A4   0x2017             MOVS     R0,#+23
   \   000000A6   0x.... 0x....      BL       emReallyLogLine
    232            }
    233          }
   \   000000AA   0xBD7F             POP      {R0-R6,PC}       ;; return

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_23:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
    234          

   \                                 In section .text, align 2, keep-with-next
    235          void emProcessTftpBootloaderPacket(const uint8_t *source,
    236                                     const uint8_t *payload,
    237                                     uint16_t payloadLength)
    238          {
   \                     emProcessTftpBootloaderPacket: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0016             MOVS     R6,R2
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0x460D             MOV      R5,R1
    239            assert(payloadLength > 0);
   \   00000008   0xD104             BNE.N    ??emProcessTftpBootloaderPacket_0
   \   0000000A   0x21EF             MOVS     R1,#+239
   \   0000000C   0x.... 0x....      ADR.W    R0,?_0
   \   00000010   0x.... 0x....      BL       halInternalAssertFailed
    240            TftpBootloaderPacketType type = (TftpBootloaderPacketType)payload[0];
   \                     ??emProcessTftpBootloaderPacket_0: (+1)
   \   00000014   0x782F             LDRB     R7,[R5, #+0]
    241            payload++;
    242            payloadLength--;
    243          
    244            emLogLine(BOOTLOAD, "Processing tftp-bootloader packet, type: %u,", type);
   \   00000016   0x.... 0x....      ADR.W    R1,?_20
   \   0000001A   0x463A             MOV      R2,R7
   \   0000001C   0x2017             MOVS     R0,#+23
   \   0000001E   0x.... 0x....      BL       emReallyLogLine
    245          
    246            if (type == KRAKEN_BOOTLOAD_REQUEST) {
   \   00000022   0x2F01             CMP      R7,#+1
   \   00000024   0xD106             BNE.N    ??emProcessTftpBootloaderPacket_1
    247              emHandleTftpBootloaderBootloadRequest(source, payload, payloadLength);
   \   00000026   0x1E72             SUBS     R2,R6,#+1
   \   00000028   0x1C69             ADDS     R1,R5,#+1
   \   0000002A   0x4620             MOV      R0,R4
   \   0000002C   0xE8BD 0x40F8      POP      {R3-R7,LR}
   \   00000030   0xB292             UXTH     R2,R2
   \   00000032   0x....             B.N      emHandleTftpBootloaderBootloadRequest
    248            } else {
    249              emLogLine(BOOTLOAD, "Confused for type: %u", type);
   \                     ??emProcessTftpBootloaderPacket_1: (+1)
   \   00000034   0x463A             MOV      R2,R7
   \   00000036   0xE8BD 0x40F8      POP      {R3-R7,LR}
   \   0000003A   0x.... 0x....      ADR.W    R1,?_21
   \   0000003E   0x2017             MOVS     R0,#+23
   \   00000040   0x.... 0x....      B.W      emReallyLogLine
    250            }
    251          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable29:
   \   00000000   0x79 0x65          DC8      "yes"
   \              0x73 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable29_1:
   \   00000000   0x6E 0x6F          DC8      0x6E, 0x6F, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable29_2:
   \   00000000   0x........         DC32     emTftpBootloaderRemoteAddress

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable29_3:
   \   00000000   0x........         DC32     bootloadAction

   \                                 In section .text, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x74 0x66          DC8 "tftp-bootloader-server.c"
   \              0x74 0x70    
   \              0x2D 0x62    
   \              0x6F 0x6F    
   \              0x74 0x6C    
   \              0x6F 0x61    
   \              0x64 0x65    
   \              0x72 0x2D    
   \              0x73 0x65    
   \              0x72 0x76    
   \              0x65 0x72    
   \              0x2E 0x63    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_1:
   \   00000000   0x42 0x6F          DC8 "Bootloader version %u"
   \              0x6F 0x74    
   \              0x6C 0x6F    
   \              0x61 0x64    
   \              0x65 0x72    
   \              0x20 0x76    
   \              0x65 0x72    
   \              0x73 0x69    
   \              0x6F 0x6E    
   \              0x20 0x25    
   \              0x75 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_2:
   \   00000000   0x77 0x61          DC8 "warning: unable to initialize bootloader"
   \              0x72 0x6E    
   \              0x69 0x6E    
   \              0x67 0x3A    
   \              0x20 0x75    
   \              0x6E 0x61    
   \              0x62 0x6C    
   \              0x65 0x20    
   \              0x74 0x6F    
   \              0x20 0x69    
   \              0x6E 0x69    
   \              0x74 0x69    
   \              0x61 0x6C    
   \              0x69 0x7A    
   \              0x65 0x20    
   \              0x62 0x6F    
   \              0x6F 0x74    
   \              0x6C 0x6F    
   \              0x61 0x64    
   \              0x65 0x72    
   \              0x00         
   \   00000029   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_3:
   \   00000000   0x73 0x65          DC8 73H, 65H, 6EH, 64H, 69H, 6EH, 67H, 20H
   \              0x6E 0x64    
   \              0x69 0x6E    
   \              0x67 0x20    
   \   00000008   0x6F 0x6B          DC8 6FH, 6BH, 61H, 79H, 20H, 74H, 6FH, 20H
   \              0x61 0x79    
   \              0x20 0x74    
   \              0x6F 0x20    
   \   00000010   0x73 0x65          DC8 73H, 65H, 6EH, 64H, 20H, 7CH, 20H, 73H
   \              0x6E 0x64    
   \              0x20 0x7C    
   \              0x20 0x73    
   \   00000018   0x75 0x63          DC8 75H, 63H, 63H, 65H, 73H, 73H, 3AH, 20H
   \              0x63 0x65    
   \              0x73 0x73    
   \              0x3A 0x20    
   \   00000020   0x25 0x73          DC8 25H, 73H, 20H, 7CH, 20H, 68H, 6FH, 6CH
   \              0x20 0x7C    
   \              0x20 0x68    
   \              0x6F 0x6C    
   \   00000028   0x64 0x4F          DC8 64H, 4FH, 66H, 66H, 3AH, 20H, 25H, 75H
   \              0x66 0x66    
   \              0x3A 0x20    
   \              0x25 0x75    
   \   00000030   0x20 0x7C          DC8 20H, 7CH, 20H, 66H, 69H, 6CH, 65H, 49H
   \              0x20 0x66    
   \              0x69 0x6C    
   \              0x65 0x49    
   \   00000038   0x6E 0x64          DC8 6EH, 64H, 65H, 78H, 3AH, 20H, 25H, 75H
   \              0x65 0x78    
   \              0x3A 0x20    
   \              0x25 0x75    
   \   00000040   0x00               DC8 0
   \   00000041   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_6:
   \   00000000   0x54 0x66          DC8 "TftpBootloader erasing page at address: %u"
   \              0x74 0x70    
   \              0x42 0x6F    
   \              0x6F 0x74    
   \              0x6C 0x6F    
   \              0x61 0x64    
   \              0x65 0x72    
   \              0x20 0x65    
   \              0x72 0x61    
   \              0x73 0x69    
   \              0x6E 0x67    
   \              0x20 0x70    
   \              0x61 0x67    
   \              0x65 0x20    
   \              0x61 0x74    
   \              0x20 0x61    
   \              0x64 0x64    
   \              0x72 0x65    
   \              0x73 0x73    
   \              0x3A 0x20    
   \              0x25 0x75    
   \              0x00         
   \   0000002B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_7:
   \   00000000   0x44 0x6F          DC8 "Done erasing storage"
   \              0x6E 0x65    
   \              0x20 0x65    
   \              0x72 0x61    
   \              0x73 0x69    
   \              0x6E 0x67    
   \              0x20 0x73    
   \              0x74 0x6F    
   \              0x72 0x61    
   \              0x67 0x65    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_8:
   \   00000000   0x49 0x6D          DC8 "Image is valid, rebooting\012"
   \              0x61 0x67    
   \              0x65 0x20    
   \              0x69 0x73    
   \              0x20 0x76    
   \              0x61 0x6C    
   \              0x69 0x64    
   \              0x2C 0x20    
   \              0x72 0x65    
   \              0x62 0x6F    
   \              0x6F 0x74    
   \              0x69 0x6E    
   \              0x67 0x0A    
   \              0x00         
   \   0000001B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_9:
   \   00000000   0x77 0x61          DC8 "warning: bootload image is not valid: %u"
   \              0x72 0x6E    
   \              0x69 0x6E    
   \              0x67 0x3A    
   \              0x20 0x62    
   \              0x6F 0x6F    
   \              0x74 0x6C    
   \              0x6F 0x61    
   \              0x64 0x20    
   \              0x69 0x6D    
   \              0x61 0x67    
   \              0x65 0x20    
   \              0x69 0x73    
   \              0x20 0x6E    
   \              0x6F 0x74    
   \              0x20 0x76    
   \              0x61 0x6C    
   \              0x69 0x64    
   \              0x3A 0x20    
   \              0x25 0x75    
   \              0x00         
   \   00000029   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_10:
   \   00000000   0x54 0x46          DC8 "TFTP write request"
   \              0x54 0x50    
   \              0x20 0x77    
   \              0x72 0x69    
   \              0x74 0x65    
   \              0x20 0x72    
   \              0x65 0x71    
   \              0x75 0x65    
   \              0x73 0x74    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_11:
   \   00000000   0x41 0x74          DC8 "Attempting to install new image"
   \              0x74 0x65    
   \              0x6D 0x70    
   \              0x74 0x69    
   \              0x6E 0x67    
   \              0x20 0x74    
   \              0x6F 0x20    
   \              0x69 0x6E    
   \              0x73 0x74    
   \              0x61 0x6C    
   \              0x6C 0x20    
   \              0x6E 0x65    
   \              0x77 0x20    
   \              0x69 0x6D    
   \              0x61 0x67    
   \              0x65 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_12:
   \   00000000   0x5B 0x54          DC8 "[TFTP RX %u bytes @ index %u]\012"
   \              0x46 0x54    
   \              0x50 0x20    
   \              0x52 0x58    
   \              0x20 0x25    
   \              0x75 0x20    
   \              0x62 0x79    
   \              0x74 0x65    
   \              0x73 0x20    
   \              0x40 0x20    
   \              0x69 0x6E    
   \              0x64 0x65    
   \              0x78 0x20    
   \              0x25 0x75    
   \              0x5D 0x0A    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_13:
   \   00000000   0x57 0x61          DC8 "Warning: storage is busy"
   \              0x72 0x6E    
   \              0x69 0x6E    
   \              0x67 0x3A    
   \              0x20 0x73    
   \              0x74 0x6F    
   \              0x72 0x61    
   \              0x67 0x65    
   \              0x20 0x69    
   \              0x73 0x20    
   \              0x62 0x75    
   \              0x73 0x79    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_14:
   \   00000000   0x5B 0x66          DC8 "[failed to write image at index %u, code: %u]\012"
   \              0x61 0x69    
   \              0x6C 0x65    
   \              0x64 0x20    
   \              0x74 0x6F    
   \              0x20 0x77    
   \              0x72 0x69    
   \              0x74 0x65    
   \              0x20 0x69    
   \              0x6D 0x61    
   \              0x67 0x65    
   \              0x20 0x61    
   \              0x74 0x20    
   \              0x69 0x6E    
   \              0x64 0x65    
   \              0x78 0x20    
   \              0x25 0x75    
   \              0x2C 0x20    
   \              0x63 0x6F    
   \              0x64 0x65    
   \              0x3A 0x20    
   \              0x25 0x75    
   \              0x5D 0x0A    
   \              0x00         
   \   0000002F   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_15:
   \   00000000   0x52 0x65          DC8 "Received tftp-bootloader bootload request"
   \              0x63 0x65    
   \              0x69 0x76    
   \              0x65 0x64    
   \              0x20 0x74    
   \              0x66 0x74    
   \              0x70 0x2D    
   \              0x62 0x6F    
   \              0x6F 0x74    
   \              0x6C 0x6F    
   \              0x61 0x64    
   \              0x65 0x72    
   \              0x20 0x62    
   \              0x6F 0x6F    
   \              0x74 0x6C    
   \              0x6F 0x61    
   \              0x64 0x20    
   \              0x72 0x65    
   \              0x71 0x75    
   \              0x65 0x73    
   \              0x74 0x00    
   \   0000002A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_16:
   \   00000000   0x52 0x65          DC8 "Reset file index"
   \              0x73 0x65    
   \              0x74 0x20    
   \              0x66 0x69    
   \              0x6C 0x65    
   \              0x20 0x69    
   \              0x6E 0x64    
   \              0x65 0x78    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_17:
   \   00000000   0x52 0x65          DC8 "Resume requested"
   \              0x73 0x75    
   \              0x6D 0x65    
   \              0x20 0x72    
   \              0x65 0x71    
   \              0x75 0x65    
   \              0x73 0x74    
   \              0x65 0x64    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_18:
   \   00000000   0x50 0x72          DC8 "Proceeding to erase image"
   \              0x6F 0x63    
   \              0x65 0x65    
   \              0x64 0x69    
   \              0x6E 0x67    
   \              0x20 0x74    
   \              0x6F 0x20    
   \              0x65 0x72    
   \              0x61 0x73    
   \              0x65 0x20    
   \              0x69 0x6D    
   \              0x61 0x67    
   \              0x65 0x00    
   \   0000001A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_19:
   \   00000000   0x62 0x6F          DC8 62H, 6FH, 6FH, 74H, 6CH, 6FH, 61H, 64H
   \              0x6F 0x74    
   \              0x6C 0x6F    
   \              0x61 0x64    
   \   00000008   0x20 0x72          DC8 20H, 72H, 65H, 71H, 75H, 65H, 73H, 74H
   \              0x65 0x71    
   \              0x75 0x65    
   \              0x73 0x74    
   \   00000010   0x20 0x66          DC8 20H, 66H, 61H, 69H, 6CH, 75H, 72H, 65H
   \              0x61 0x69    
   \              0x6C 0x75    
   \              0x72 0x65    
   \   00000018   0x2C 0x20          DC8 2CH, 20H, 25H, 75H, 20H, 62H, 79H, 74H
   \              0x25 0x75    
   \              0x20 0x62    
   \              0x79 0x74    
   \   00000020   0x65 0x73          DC8 65H, 73H, 20H, 6CH, 65H, 66H, 74H, 20H
   \              0x20 0x6C    
   \              0x65 0x66    
   \              0x74 0x20    
   \   00000028   0x62 0x75          DC8 62H, 75H, 74H, 20H, 77H, 61H, 6EH, 74H
   \              0x74 0x20    
   \              0x77 0x61    
   \              0x6E 0x74    
   \   00000030   0x65 0x64          DC8 65H, 64H, 20H, 25H, 75H, 0
   \              0x20 0x25    
   \              0x75 0x00    
   \   00000036   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_20:
   \   00000000   0x50 0x72          DC8 "Processing tftp-bootloader packet, type: %u,"
   \              0x6F 0x63    
   \              0x65 0x73    
   \              0x73 0x69    
   \              0x6E 0x67    
   \              0x20 0x74    
   \              0x66 0x74    
   \              0x70 0x2D    
   \              0x62 0x6F    
   \              0x6F 0x74    
   \              0x6C 0x6F    
   \              0x61 0x64    
   \              0x65 0x72    
   \              0x20 0x70    
   \              0x61 0x63    
   \              0x6B 0x65    
   \              0x74 0x2C    
   \              0x20 0x74    
   \              0x79 0x70    
   \              0x65 0x3A    
   \              0x20 0x25    
   \              0x75 0x2C    
   \              0x00         
   \   0000002D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_21:
   \   00000000   0x43 0x6F          DC8 "Confused for type: %u"
   \              0x6E 0x66    
   \              0x75 0x73    
   \              0x65 0x64    
   \              0x20 0x66    
   \              0x6F 0x72    
   \              0x20 0x74    
   \              0x79 0x70    
   \              0x65 0x3A    
   \              0x20 0x25    
   \              0x75 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_4:
   \   00000000   0x79 0x65          DC8 "yes"
   \              0x73 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_5:
   \   00000000   0x6E 0x6F          DC8 "no"
   \              0x00         
   \   00000003   0x00               DC8 0

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   emBootloadEventHandler
         0   -> emEventControlSetActive
        16   -> emEventControlSetActive
        16   -> emLogIsActive
        16   -> emReallyLogLine
        16   -> emberSerialGuaranteedPrintf
        16   -> halAppBootloaderEraseRawStorage
        16   -> halAppBootloaderImageIsValid
        16   -> halAppBootloaderImageIsValidReset
        16   -> halAppBootloaderInfo
         0   -> halAppBootloaderInstallNewImage
        16   -> halAppBootloaderStorageBusy
         0   -> halInternalAssertFailed
        16   -> halInternalAssertFailed
         0   -> sendOkayToSend
      32   emHandleTftpBootloaderBootloadRequest
        32   -> emEventControlSetActive
        32   -> emFetchInt32u
        32   -> emReallyLogLine
        32   -> emResetTftpServer
        32   -> emSetTftpBootloaderRemoteAddress
        32   -> emberFetchHighLowInt16u
        32   -> emberVerifyBootloadRequest
        32   -> sendOkayToSend
       8   emInitializeTftpBootloader
         8   -> emInitializeBaseTftpBootloaderFunctionality
         0   -> emberSerialPrintfLine
         8   -> halAppBootloaderInfo
         8   -> halAppBootloaderInit
         8   -> halInternalAssertFailed
       0   emMarkTftpBootloaderBuffers
         0   -> emMarkBuffer
      24   emProcessTftpBootloaderPacket
         0   -> emHandleTftpBootloaderBootloadRequest
         0   -> emReallyLogLine
        24   -> emReallyLogLine
        24   -> halInternalAssertFailed
      24   emStoreTftpFileChunk
        24   -> emReallyLogLine
        24   -> halAppBootloaderStorageBusy
        24   -> halAppBootloaderWriteRawStorage
       8   emTftpServerStatusHandler
         0   -> emEventControlSetActive
         0   -> emReallyLogLine
         8   -> emReallyLogLine
      40   sendOkayToSend
        40   -> emGetTftpBootloaderRemoteAddress
        40   -> emReallyLogLine
        40   -> emStoreInt32u
        40   -> emberSendUdp


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable29
       4  ??DataTable29_1
       4  ??DataTable29_2
       4  ??DataTable29_3
       6  ?Subroutine0
      28  ?_0
      24  ?_1
      20  ?_10
      32  ?_11
      32  ?_12
      28  ?_13
      48  ?_14
      44  ?_15
      20  ?_16
      20  ?_17
      28  ?_18
      56  ?_19
      44  ?_2
      48  ?_20
      24  ?_21
       8  ?_22
      12  ?_23
      68  ?_3
       4  ?_4
       4  ?_5
      44  ?_6
      24  ?_7
      28  ?_8
      44  ?_9
      20  bootloadAction
          emBootloadEvent
          bootloadEraseAddress
          nextFileIndex
     224  emBootloadEventHandler
     172  emHandleTftpBootloaderBootloadRequest
      60  emInitializeTftpBootloader
       6  emMarkTftpBootloaderBuffers
      68  emProcessTftpBootloaderPacket
      78  emStoreTftpFileChunk
      48  emTftpServerStatusHandler
     102  sendOkayToSend

 
    20 bytes in section .bss
    28 bytes in section .rodata
 1 484 bytes in section .text
 
 1 484 bytes of CODE  memory
    28 bytes of CONST memory
    20 bytes of DATA  memory

Errors: none
Warnings: none
