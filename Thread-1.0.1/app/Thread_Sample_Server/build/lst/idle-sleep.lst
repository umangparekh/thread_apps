###############################################################################
#
# IAR ANSI C/C++ Compiler V7.30.1.7746/W32 for ARM        28/Sep/2015  13:29:28
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\SiliconLabs\Thread-1.0.1\app\thread\plugin\idle-sleep\idle-sleep.c
#    Command line =  
#        C:\SiliconLabs\Thread-1.0.1\app\thread\plugin\idle-sleep\idle-sleep.c
#        -D APP_BTL -D CORTEXM3 -D CORTEXM3_EMBER_MICRO -D CORTEXM3_EM3588 -D
#        PHY_EM3XX -D "BOARD_HEADER=\"thread-board.h\"" -D
#        "CONFIGURATION_HEADER=\"thread-configuration.h\"" -D
#        "PLATFORM_HEADER=\"hal/micro/cortexm3/compiler/iar.h\"" -D
#        "__SOURCEFILE__=\"idle-sleep.c\"" -D BOARD_DEV0680ETM -D
#        "EMBER_AF_API_EMBER_TYPES=\"stack/include/ember-types.h\"" -D
#        EMBER_STACK_IP -D EMBER_RIP_STACK -D HAVE_TLS_JPAKE -D
#        DEBUG_LEVEL=FULL_DEBUG -D
#        "APPLICATION_TOKEN_HEADER=\"thread-token.h\"" -lC
#        C:\SiliconLabs\Thread-1.0.1\app\Thread_Sample_Server\build\lst\
#        --diag_suppress Pa050 -o
#        C:\SiliconLabs\Thread-1.0.1\app\Thread_Sample_Server\build\obj\
#        --debug --endian=little --cpu=Cortex-M3 --no_path_in_file_macros
#        --separate_cluster_for_initialized_variables -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\SiliconLabs\Thread-1.0.1\app\thread\plugin\idle-sleep\ -I
#        C:\SiliconLabs\Thread-1.0.1\app\Thread_Sample_Server\ -I
#        C:\SiliconLabs\Thread-1.0.1\app\Thread_Sample_Server\..\..\ -I
#        C:\SiliconLabs\Thread-1.0.1\app\Thread_Sample_Server\..\..\app\util\
#        -I C:\SiliconLabs\Thread-1.0.1\app\Thread_Sample_Server\..\..\stack\
#        -I C:\SiliconLabs\Thread-1.0.1\app\Thread_Sample_Server\..\..\hal\ -I
#        C:\SiliconLabs\Thread-1.0.1\app\Thread_Sample_Server\..\..\hal\..\
#        -Ohz --use_c++_inline
#    List file    =  
#        C:\SiliconLabs\Thread-1.0.1\app\Thread_Sample_Server\build\lst\idle-sleep.lst
#    Object file  =  
#        C:\SiliconLabs\Thread-1.0.1\app\Thread_Sample_Server\build\obj\idle-sleep.o
#
###############################################################################

C:\SiliconLabs\Thread-1.0.1\app\thread\plugin\idle-sleep\idle-sleep.c
      1          // Copyright 2015 Silicon Laboratories, Inc.
      2          
      3          #include PLATFORM_HEADER
      4          #include CONFIGURATION_HEADER
      5          #include EMBER_AF_API_STACK
      6          #include EMBER_AF_API_HAL
      7          #ifdef EMBER_AF_API_SERIAL
      8            #include EMBER_AF_API_SERIAL
      9          #endif
     10          #ifdef EMBER_AF_API_DEBUG_PRINT
     11            #include EMBER_AF_API_DEBUG_PRINT
     12          #endif
     13          #include "thread-bookkeeping.h"
     14          #include "thread-callbacks.h"
     15          
     16          extern const EmberEventData emAppEvents[];
     17          
     18          // In testing, we cannot sleep or idle if the simulator is transmitting on any
     19          // of the serial ports.
     20          #ifdef EMBER_TEST
     21            extern bool doingSerialTx[];
     22            #define simulatorDoingSerialTx(port) doingSerialTx[port]
     23          #else
     24            #define simulatorDoingSerialTx(port) false
     25          #endif
     26          
     27          static bool okToIdleOrSleep(void)
     28          {
     29          #ifdef EMBER_AF_API_SERIAL
     30          #ifdef EM_NUM_SERIAL_PORTS
     31            // With numbered serial ports, if any port has pending incoming or outgoing
     32            // data or if the simulator is transmitting, we do not sleep.
     33            uint8_t i;
     34            for (i = 0; i < EM_NUM_SERIAL_PORTS; i++) {
     35              if (!emberSerialUnused(i)
     36                  && (emberSerialReadAvailable(i) != 0
     37                      || emberSerialWriteUsed(i) != 0
     38                      || simulatorDoingSerialTx(i))) {
     39                return false;
     40              }
     41            }
     42          #else // EM_NUM_SERIAL_PORTS
     43            // Without numbered ports, if there is pending incoming or outgoing data, we
     44            // do not sleep.
     45            if (!emberSerialUnused(APP_SERIAL)
     46                && (emberSerialReadAvailable(APP_SERIAL) != 0
     47                    || emberSerialWriteUsed(APP_SERIAL) != 0
     48                    || simulatorDoingSerialTx(APP_SERIAL))) {
     49              return false;
     50            }
     51          #endif // EM_NUM_SERIAL_PORTS
     52          #endif // EMBER_AF_API_SERIAL
     53            return true;
     54          }
     55          

   \                                 In section .text, align 4, keep-with-next
     56          void emberAfPluginIdleSleepTickCallback(void)
     57          {
   \                     emberAfPluginIdleSleepTickCallback: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
     58            // Turn interrupts off so that we can safely determine whether we can sleep
     59            // or idle.  Both halSleepForMilliseconds and halCommonIdleForMilliseconds
     60            // forcibly enable interrupts.  We can call neither function or exactly one
     61            // of them without risking a race condition.  Note that if we don't call
     62            // either, we have to enable interrupts ourselves.
     63            INTERRUPTS_OFF();
   \   00000004   0x.... 0x....      BL       _disableBasePri
     64          
     65            // We can idle or sleep if some basic conditions are satisfied.  If not, we
     66            // stay awake and active.  Otherwise, we try to sleep or idle, in that order.
     67            if (okToIdleOrSleep()) {
   \   00000008   0x2400             MOVS     R4,#+0
   \   0000000A   0x4D24             LDR.N    R5,??emberAfPluginIdleSleepTickCallback_0
   \                     ??emberAfPluginIdleSleepTickCallback_1: (+1)
   \   0000000C   0x4620             MOV      R0,R4
   \   0000000E   0x.... 0x....      BL       emberSerialUnused
   \   00000012   0xB958             CBNZ.N   R0,??emberAfPluginIdleSleepTickCallback_2
   \   00000014   0x4620             MOV      R0,R4
   \   00000016   0x.... 0x....      BL       emberSerialReadAvailable
   \   0000001A   0x2800             CMP      R0,#+0
   \   0000001C   0xD13A             BNE.N    ??emberAfPluginIdleSleepTickCallback_3
   \   0000001E   0x4620             MOV      R0,R4
   \   00000020   0x.... 0x....      BL       emberSerialWriteAvailable
   \   00000024   0xF835 0x1014      LDRH     R1,[R5, R4, LSL #+1]
   \   00000028   0x1A08             SUBS     R0,R1,R0
   \   0000002A   0xD133             BNE.N    ??emberAfPluginIdleSleepTickCallback_3
   \                     ??emberAfPluginIdleSleepTickCallback_2: (+1)
   \   0000002C   0x1C64             ADDS     R4,R4,#+1
   \   0000002E   0xB2E4             UXTB     R4,R4
   \   00000030   0x2C04             CMP      R4,#+4
   \   00000032   0xDBEB             BLT.N    ??emberAfPluginIdleSleepTickCallback_1
     68              // The maximum duration for both sleeping and idling is determined by the
     69              // time to the next stack or framework event.  The stack also tells us
     70              // whether the radio needs to be on.  If so, we cannot sleep, but we can
     71              // idle.
     72              EmberIdleRadioState radioStateResult;
     73              uint32_t attemptedDurationMs, durationMs;
     74              durationMs = emberStackIdleTimeMs(&radioStateResult);
   \   00000034   0xA801             ADD      R0,SP,#+4
   \   00000036   0x.... 0x....      BL       emberStackIdleTimeMs
   \   0000003A   0x9000             STR      R0,[SP, #+0]
     75              durationMs = emberMsToNextEvent(emAppEvents, durationMs);
   \   0000003C   0x4601             MOV      R1,R0
   \   0000003E   0x4818             LDR.N    R0,??emberAfPluginIdleSleepTickCallback_0+0x4
   \   00000040   0x.... 0x....      BL       emberMsToNextEvent
   \   00000044   0x9000             STR      R0,[SP, #+0]
     76              attemptedDurationMs = durationMs;
   \   00000046   0x4604             MOV      R4,R0
     77          
     78              // If the stack says the radio does not need to be on, we may sleep.
     79              // However, if the sleep duration is below our minimum threshold, we don't
     80              // bother.  It takes time to shut everything down and bring everything back
     81              // up and, at some point, it becomes useless to sleep.  If the radio can be
     82              // off and the duration is long enough, we give the application and plugins
     83              // one last chance to stay awake if they want.
     84              if (radioStateResult != IDLE_WITH_RADIO_ON
     85                  && EMBER_AF_PLUGIN_IDLE_SLEEP_MINIMUM_SLEEP_DURATION_MS <= durationMs
     86                  && emberAfOkToSleep(durationMs)) {
   \   00000048   0xF89D 0x0004      LDRB     R0,[SP, #+4]
   \   0000004C   0xB1A8             CBZ.N    R0,??emberAfPluginIdleSleepTickCallback_4
   \   0000004E   0x4620             MOV      R0,R4
   \   00000050   0x2805             CMP      R0,#+5
   \   00000052   0xD312             BCC.N    ??emberAfPluginIdleSleepTickCallback_4
   \   00000054   0x.... 0x....      BL       emberAfOkToSleep
   \   00000058   0xB178             CBZ.N    R0,??emberAfPluginIdleSleepTickCallback_4
     87                emberStackPowerDown();
   \   0000005A   0x.... 0x....      BL       emberStackPowerDown
     88                halPowerDown();
   \   0000005E   0x.... 0x....      BL       halPowerDown
     89                // WARNING: The following function enables interrupts, so we will cease
     90                // to be atomic by the time it returns.
     91                halSleepForMilliseconds(&durationMs);
   \   00000062   0xA800             ADD      R0,SP,#+0
   \   00000064   0x.... 0x....      BL       halSleepForMilliseconds
     92                halPowerUp();
   \   00000068   0x.... 0x....      BL       halPowerUp
     93                emberStackPowerUp();
   \   0000006C   0x.... 0x....      BL       emberStackPowerUp
     94                emberAfPluginIdleSleepWakeUp(attemptedDurationMs - durationMs);
   \   00000070   0x9800             LDR      R0,[SP, #+0]
   \   00000072   0x1A20             SUBS     R0,R4,R0
   \   00000074   0x.... 0x....      BL       emberAfPluginIdleSleepWakeUp
     95                emberAfDebugPrintln("slept for %lu ms",
     96                                    (attemptedDurationMs - durationMs));
     97                return;
   \   00000078   0xBD37             POP      {R0-R2,R4,R5,PC}
     98              }
     99          
    100          #ifndef EMBER_NO_IDLE_SUPPORT
    101              // If we are here, it means we could not sleep, so we will try to idle
    102              // instead.  We give the application and plugins one last chance to stay
    103              // active if they want.  Note that interrupts are still disabled at this
    104              // point.
    105              if (durationMs != 0 && emberAfOkToIdle(durationMs)) {
   \                     ??emberAfPluginIdleSleepTickCallback_4: (+1)
   \   0000007A   0x9800             LDR      R0,[SP, #+0]
   \   0000007C   0xB150             CBZ.N    R0,??emberAfPluginIdleSleepTickCallback_3
   \   0000007E   0x.... 0x....      BL       emberAfOkToIdle
   \   00000082   0xB138             CBZ.N    R0,??emberAfPluginIdleSleepTickCallback_3
    106                // WARNING: The following function enables interrupts, so we will cease
    107                // to be atomic by the time it returns.
    108                halCommonIdleForMilliseconds(&durationMs);
   \   00000084   0xA800             ADD      R0,SP,#+0
   \   00000086   0x.... 0x....      BL       halCommonIdleForMilliseconds
    109                emberAfPluginIdleSleepActive(attemptedDurationMs - durationMs);
   \   0000008A   0x9800             LDR      R0,[SP, #+0]
   \   0000008C   0x1A20             SUBS     R0,R4,R0
   \   0000008E   0x.... 0x....      BL       emberAfPluginIdleSleepActive
    110                emberAfDebugPrintln("idled for %lu ms",
    111                                    (attemptedDurationMs - durationMs));
    112                return;
   \   00000092   0xBD37             POP      {R0-R2,R4,R5,PC}
    113              }
    114          #endif // !EMBER_NO_IDLE_SUPPORT
    115          
    116            } // okToIdleOrSleep
    117          
    118            // If we are here, it means we did not sleep or idle.  Interrupts are still
    119            // disabled at this point, so we have to enable them again.
    120            INTERRUPTS_ON();
   \                     ??emberAfPluginIdleSleepTickCallback_3: (+1)
   \   00000094   0x.... 0x....      BL       _enableBasePri
    121          }
   \   00000098   0xBD37             POP      {R0-R2,R4,R5,PC}  ;; return
   \   0000009A   0xBF00             Nop      
   \                     ??emberAfPluginIdleSleepTickCallback_0:
   \   0000009C   0x........         DC32     emSerialTxQueueSizes
   \   000000A0   0x........         DC32     emAppEvents

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      24   emberAfPluginIdleSleepTickCallback
        24   -> _disableBasePri
        24   -> _enableBasePri
        24   -> emberAfOkToIdle
        24   -> emberAfOkToSleep
        24   -> emberAfPluginIdleSleepActive
        24   -> emberAfPluginIdleSleepWakeUp
        24   -> emberMsToNextEvent
        24   -> emberSerialReadAvailable
        24   -> emberSerialUnused
        24   -> emberSerialWriteAvailable
        24   -> emberStackIdleTimeMs
        24   -> emberStackPowerDown
        24   -> emberStackPowerUp
        24   -> halCommonIdleForMilliseconds
        24   -> halPowerDown
        24   -> halPowerUp
        24   -> halSleepForMilliseconds


   Section sizes:

   Bytes  Function/Label
   -----  --------------
     164  emberAfPluginIdleSleepTickCallback

 
 164 bytes in section .text
 
 164 bytes of CODE memory

Errors: none
Warnings: none
