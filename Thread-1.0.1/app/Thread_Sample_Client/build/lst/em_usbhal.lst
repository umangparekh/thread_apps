###############################################################################
#
# IAR ANSI C/C++ Compiler V7.30.1.7746/W32 for ARM        28/Sep/2015  14:43:29
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\SiliconLabs\Thread-1.0.1\hal\micro\cortexm3\usb\em_usbhal.c
#    Command line =  
#        C:\SiliconLabs\Thread-1.0.1\hal\micro\cortexm3\usb\em_usbhal.c -D
#        APP_BTL -D CORTEXM3 -D CORTEXM3_EMBER_MICRO -D CORTEXM3_EM3588 -D
#        PHY_EM3XX -D "BOARD_HEADER=\"thread-board.h\"" -D
#        "CONFIGURATION_HEADER=\"thread-configuration.h\"" -D
#        "PLATFORM_HEADER=\"hal/micro/cortexm3/compiler/iar.h\"" -D
#        "__SOURCEFILE__=\"em_usbhal.c\"" -D BOARD_DEV0680ETM -D
#        "EMBER_AF_API_EMBER_TYPES=\"stack/include/ember-types.h\"" -D
#        EMBER_STACK_IP -D EMBER_RIP_STACK -D HAVE_TLS_JPAKE -D
#        DEBUG_LEVEL=FULL_DEBUG -D
#        "APPLICATION_TOKEN_HEADER=\"thread-token.h\"" -lC
#        C:\SiliconLabs\Thread-1.0.1\app\Thread_Sample_Client\build\lst\
#        --diag_suppress Pa050 -o
#        C:\SiliconLabs\Thread-1.0.1\app\Thread_Sample_Client\build\obj\
#        --debug --endian=little --cpu=Cortex-M3 --no_path_in_file_macros
#        --separate_cluster_for_initialized_variables -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\SiliconLabs\Thread-1.0.1\hal\micro\cortexm3\usb\ -I
#        C:\SiliconLabs\Thread-1.0.1\app\Thread_Sample_Client\ -I
#        C:\SiliconLabs\Thread-1.0.1\app\Thread_Sample_Client\..\..\ -I
#        C:\SiliconLabs\Thread-1.0.1\app\Thread_Sample_Client\..\..\app\util\
#        -I C:\SiliconLabs\Thread-1.0.1\app\Thread_Sample_Client\..\..\stack\
#        -I C:\SiliconLabs\Thread-1.0.1\app\Thread_Sample_Client\..\..\hal\ -I
#        C:\SiliconLabs\Thread-1.0.1\app\Thread_Sample_Client\..\..\hal\..\
#        -Ohz --use_c++_inline
#    List file    =  
#        C:\SiliconLabs\Thread-1.0.1\app\Thread_Sample_Client\build\lst\em_usbhal.lst
#    Object file  =  
#        C:\SiliconLabs\Thread-1.0.1\app\Thread_Sample_Client\build\obj\em_usbhal.o
#
###############################################################################

C:\SiliconLabs\Thread-1.0.1\hal\micro\cortexm3\usb\em_usbhal.c
      1          /**************************************************************************//**
      2           * @file
      3           * @brief USB protocol stack library, low level USB peripheral access.
      4           * @author Nathaniel Ting
      5           * @version 3.20.3
      6           * <!-- Copyright 2013 by Silicon Laboratories. All rights reserved.     *80*-->
      7           *****************************************************************************/
      8          
      9          #include PLATFORM_HEADER
     10          #include "stack/include/ember.h"
     11          #include "hal/hal.h"
     12          
     13          #if defined(CORTEXM3_EM35X_USB)
     14          #include "em_usb.h"
     15          #include "em_usbtypes.h"
     16          #include "em_usbhal.h"
     17          
     18          
     19          /** @cond DO_NOT_INCLUDE_WITH_DOXYGEN */
     20          
     21          

   \                                 In section .bss, align 1
     22          bool usbVbusPresent;
   \                     usbVbusPresent:
   \   00000000                      DS8 1
     23          extern USBD_Device_TypeDef *dev;
     24          
     25          ALIGNMENT(8)

   \                                 In section .bss, align 8
     26          EndPointUnion usbBufferA = {0,};
   \                     usbBufferA:
   \   00000000                      DS8 1392

   \                                 In section .data, align 4
     27          uint8_t *EPOUTBUF[7] = {usbBufferA.eps.ep0OUT,
   \                     EPOUTBUF:
   \   00000000   0x........         DC32 usbBufferA + 8H, usbBufferA + 18H, usbBufferA + 28H
   \              0x........   
   \              0x........   
   \   0000000C   0x........         DC32 usbBufferA + 70H, usbBufferA + 0D0H, usbBufferA + 130H
   \              0x........   
   \              0x........   
   \   00000018   0x........         DC32 usbBufferA + 370H
     28                              usbBufferA.eps.ep1OUT,
     29                              usbBufferA.eps.ep2OUT,
     30                              usbBufferA.eps.ep3OUT,
     31                              usbBufferA.eps.ep4OUT,
     32                              usbBufferA.eps.ep5OUT,
     33                              usbBufferA.eps.ep6OUT};

   \                                 In section .data, align 4
     34          uint8_t *EPINBUF[7]  = {usbBufferA.eps.ep0IN,
   \                     EPINBUF:
   \   00000000   0x........         DC32 usbBufferA, usbBufferA + 10H, usbBufferA + 20H, usbBufferA + 30H
   \              0x........   
   \              0x........   
   \              0x........   
   \   00000010   0x........         DC32 usbBufferA + 0B0H, usbBufferA + 0F0H, usbBufferA + 170H
   \              0x........   
   \              0x........   
     35                                usbBufferA.eps.ep1IN,
     36                                usbBufferA.eps.ep2IN,
     37                                usbBufferA.eps.ep3IN,
     38                                usbBufferA.eps.ep4IN,
     39                                usbBufferA.eps.ep5IN,
     40                                usbBufferA.eps.ep6IN};

   \                                 In section .data, align 4
     41          volatile uint32_t *EPOUTBUFSIZE[7] = {&USB_RXBUFSIZEEP0A,
   \                     EPOUTBUFSIZE:
   \   00000000   0x40011078         DC32 40011078H, 4001107CH, 40011080H, 40011084H, 40011088H, 4001108CH
   \              0x4001107C   
   \              0x40011080   
   \              0x40011084   
   \              0x40011088   
   \              0x4001108C   
   \   00000018   0x40011090         DC32 40011090H
     42                                              &USB_RXBUFSIZEEP1A,
     43                                              &USB_RXBUFSIZEEP2A,
     44                                              &USB_RXBUFSIZEEP3A,
     45                                              &USB_RXBUFSIZEEP4A,
     46                                              &USB_RXBUFSIZEEP5A,
     47                                              &USB_RXBUFSIZEEP6A};
     48          

   \                                 In section .data, align 4
     49          volatile uint32_t *EPINBUFSIZE[7] =  {&USB_TXBUFSIZEEP0A,
   \                     EPINBUFSIZE:
   \   00000000   0x40011010         DC32 40011010H, 40011014H, 40011018H, 4001101CH, 40011020H, 40011024H
   \              0x40011014   
   \              0x40011018   
   \              0x4001101C   
   \              0x40011020   
   \              0x40011024   
   \   00000018   0x40011028         DC32 40011028H
     50                                              &USB_TXBUFSIZEEP1A,
     51                                              &USB_TXBUFSIZEEP2A,
     52                                              &USB_TXBUFSIZEEP3A,
     53                                              &USB_TXBUFSIZEEP4A,
     54                                              &USB_TXBUFSIZEEP5A,
     55                                              &USB_TXBUFSIZEEP6A};

   \                                 In section .text, align 2, keep-with-next
     56          void USBDHAL_Connect( void )
     57          {
   \                     USBDHAL_Connect: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     58            #if USB_SELFPWRD_STATE==1 && defined(VBUSMON)
     59          
     60            //For self-powered devices, The USB specification requires that the pull-up
     61            //resistor is disconnected if VBUS is not connected.
     62            vbusMonCfg();
   \   00000002   0x.... 0x....      BL       vbusMonCfg
     63            if(usbVbusPresent) {
   \   00000006   0x....             LDR.N    R0,??DataTable6
   \   00000008   0x7800             LDRB     R0,[R0, #+0]
   \   0000000A   0xB140             CBZ.N    R0,??USBDHAL_Connect_0
     64              //Set ENUMCTRL ouput-high to enumerate.
     65              ENUMCTRL_SETCFG(GPIOCFG_OUT);
   \   0000000C   0x....             LDR.N    R0,??DataTable6_1  ;; 0x4000b000
   \   0000000E   0x6801             LDR      R1,[R0, #+0]
   \   00000010   0xF421 0x6170      BIC      R1,R1,#0xF00
   \   00000014   0xF441 0x7180      ORR      R1,R1,#0x100
   \   00000018   0x6001             STR      R1,[R0, #+0]
     66              ENUMCTRL_SET();
   \   0000001A   0x2104             MOVS     R1,#+4
   \   0000001C   0x6101             STR      R1,[R0, #+16]
     67            }
     68            #else // USB_SELFPWRD_STATE==1 && defined(VBUSMON)
     69              //Set ENUMCTRL ouput-high to enumerate.
     70              ENUMCTRL_SETCFG(GPIOCFG_OUT);
     71              ENUMCTRL_SET();
     72            #endif // USB_SELFPWRD_STATE==1 && defined(VBUSMON)
     73          
     74          }
   \                     ??USBDHAL_Connect_0: (+1)
   \   0000001E   0xBD01             POP      {R0,PC}          ;; return
     75          

   \                                 In section .text, align 2, keep-with-next
     76          void USBDHAL_Disconnect( void )
     77          {
     78            ENUMCTRL_SETCFG(GPIOCFG_IN);
   \                     USBDHAL_Disconnect: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable6_1  ;; 0x4000b000
   \   00000002   0x6801             LDR      R1,[R0, #+0]
   \   00000004   0xF421 0x6170      BIC      R1,R1,#0xF00
   \   00000008   0xF441 0x6180      ORR      R1,R1,#0x400
   \   0000000C   0x6001             STR      R1,[R0, #+0]
     79            ENUMCTRL_CLR();
   \   0000000E   0x2104             MOVS     R1,#+4
   \   00000010   0x6141             STR      R1,[R0, #+20]
     80          }
   \   00000012   0x4770             BX       LR               ;; return
     81          

   \                                 In section .text, align 2, keep-with-next
     82          USB_Status_TypeDef USBDHAL_CoreInit( uint32_t totalRxFifoSize,
     83                                               uint32_t totalTxFifoSize )
     84          {
   \                     USBDHAL_CoreInit: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
     85          
     86            //Configure PA0 and PA1 in analog mode for USB
     87            SET_REG_FIELD(GPIO_PACFGL, PA0_CFG, GPIOCFG_ANALOG);
   \   00000002   0x....             LDR.N    R0,??DataTable6_1  ;; 0x4000b000
   \   00000004   0x....             LDR.N    R4,??DataTable6_2  ;; 0x40011000
   \   00000006   0x6801             LDR      R1,[R0, #+0]
   \   00000008   0x0909             LSRS     R1,R1,#+4
   \   0000000A   0x0109             LSLS     R1,R1,#+4
   \   0000000C   0x6001             STR      R1,[R0, #+0]
   \   0000000E   0xF44F 0x62AE      MOV      R2,#+1392
     88            SET_REG_FIELD(GPIO_PACFGL, PA1_CFG, GPIOCFG_ANALOG);
   \   00000012   0x6801             LDR      R1,[R0, #+0]
   \   00000014   0xF021 0x01F0      BIC      R1,R1,#0xF0
   \   00000018   0x6001             STR      R1,[R0, #+0]
   \   0000001A   0x2100             MOVS     R1,#+0
     89            
     90            USB_BUFBASEA = (uint32_t)usbBufferA.allEps;
   \   0000001C   0x....             LDR.N    R0,??DataTable6_3
   \   0000001E   0x6020             STR      R0,[R4, #+0]
     91            MEMSET(usbBufferA.allEps, 0, USB_BUFFER_SIZE);
   \   00000020   0x.... 0x....      BL       halCommonMemSet
     92          
     93            // Double buffering currently not supported
     94            // #ifdef USB_DOUBLE_BUFFER  
     95            //   USB_BUFBASEB = (uint32_t)usbBufferB.allEps;
     96            //   MEMSET(usbBufferB.allEps, 0, USB_BUFFER_SIZE);
     97            //   //Refer to "handle buffer B" in the driveEp3Tx() function above
     98            //   //to learn why double buffering is not enabled by default.
     99            //   
    100            //   //Enable double buffering bulk EP3.
    101            //   USB_CTRL |= (USB_ENBUFOUTEP3B | USB_ENBUFINEP3B);
    102            // #endif // USB_DOUBLE_BUFFER
    103            
    104            //Use the SELFPWDRD and REMOTEWKUPEN state defines to set the appropriate
    105            //bits in USB_CTRL
    106            USB_CTRL = (USB_CTRL & (~(USB_SELFPWRD_MASK | USB_REMOTEWKUPEN_MASK))) |
    107                       ((USB_SELFPWRD_STATE<<USB_SELFPWRD_BIT) |
    108                        (USB_REMOTEWKUPEN_STATE<<USB_REMOTEWKUPEN_BIT));
   \   00000024   0x6DE0             LDR      R0,[R4, #+92]
   \   00000026   0xF020 0x0005      BIC      R0,R0,#0x5
   \   0000002A   0xF040 0x0001      ORR      R0,R0,#0x1
   \   0000002E   0x65E0             STR      R0,[R4, #+92]
    109          
    110          #ifdef  EMBER_EMU_TEST
    111            //Select which GPIO output is used for connect/disconnect. Any
    112            //value > 47, selects disconnected state.
    113            EMU_USB_DISCONNECT = PORTA_PIN(2);
    114          #endif //EMBER_EMU_TEST
    115            
    116          
    117            return USB_STATUS_OK;
   \   00000030   0x2000             MOVS     R0,#+0
   \   00000032   0xBD10             POP      {R4,PC}          ;; return
    118          }
    119          
    120          

   \                                 In section .text, align 2, keep-with-next
    121          void USBDHAL_AbortAllTransfers( USB_Status_TypeDef reason )
    122          {
   \                     USBDHAL_AbortAllTransfers: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x4604             MOV      R4,R0
    123            int i;
    124            USBD_Ep_TypeDef *ep;
    125            USB_XferCompleteCb_TypeDef callback;
    126          
    127            if ( reason != USB_STATUS_DEVICE_RESET )
    128            {
    129              // unsupported
    130              // USBDHAL_AbortAllEps();
    131            }
    132          
    133            for ( i = 1; i <= NUM_EP_USED; i++ )
   \   00000004   0x2501             MOVS     R5,#+1
   \   00000006   0x....             LDR.N    R6,??DataTable6_4  ;; 0x4000a88c
   \   00000008   0x....             LDR.N    R7,??DataTable6_5  ;; 0x4001104c
    134            {
    135              ep = &(dev->ep[i]);
   \                     ??USBDHAL_AbortAllTransfers_0: (+1)
   \   0000000A   0x....             LDR.N    R0,??DataTable6_6
   \   0000000C   0x6801             LDR      R1,[R0, #+0]
   \   0000000E   0x2028             MOVS     R0,#+40
   \   00000010   0xFB00 0x1005      MLA      R0,R0,R5,R1
   \   00000014   0x3034             ADDS     R0,R0,#+52
    136              if ( ep->state != D_EP_IDLE )
   \   00000016   0xF890 0x2020      LDRB     R2,[R0, #+32]
   \   0000001A   0x2A00             CMP      R2,#+0
   \   0000001C   0xD041             BEQ.N    ??USBDHAL_AbortAllTransfers_1
    137              {
    138                ep->state = D_EP_IDLE;
   \   0000001E   0x2200             MOVS     R2,#+0
   \   00000020   0xF880 0x2020      STRB     R2,[R0, #+32]
    139                if ( ep->xferCompleteCb )
   \   00000024   0x6A43             LDR      R3,[R0, #+36]
   \   00000026   0x001A             MOVS     R2,R3
   \   00000028   0xD03B             BEQ.N    ??USBDHAL_AbortAllTransfers_1
    140                {
    141                  callback = ep->xferCompleteCb;
    142                  ep->xferCompleteCb = NULL;
   \   0000002A   0x2200             MOVS     R2,#+0
   \   0000002C   0x6242             STR      R2,[R0, #+36]
    143          
    144                  if ( ( dev->lastState == USBD_STATE_CONFIGURED ) &&
    145                       ( dev->state     == USBD_STATE_ADDRESSED  )    )
   \   0000002E   0xF891 0x2021      LDRB     R2,[R1, #+33]
   \   00000032   0x2A04             CMP      R2,#+4
   \   00000034   0xBF04             ITT      EQ 
   \   00000036   0x7FC9             LDRBEQ   R1,[R1, #+31]
   \   00000038   0x2904             CMPEQ    R1,#+4
   \   0000003A   0xD12E             BNE.N    ??USBDHAL_AbortAllTransfers_2
    146                  {
    147                    USBDHAL_DeactivateEp( ep );
   \   0000003C   0x7882             LDRB     R2,[R0, #+2]
   \   0000003E   0xF890 0xC000      LDRB     R12,[R0, #+0]
   \   00000042   0x2101             MOVS     R1,#+1
   \   00000044   0xFA01 0xF202      LSL      R2,R1,R2
   \   00000048   0x43D2             MVNS     R2,R2
   \   0000004A   0xF1BC 0x0F00      CMP      R12,#+0
   \   0000004E   0xD016             BEQ.N    ??USBDHAL_AbortAllTransfers_3
   \   00000050   0xF8D7 0xC000      LDR      R12,[R7, #+0]
   \   00000054   0xEA02 0x020C      AND      R2,R2,R12
   \   00000058   0x603A             STR      R2,[R7, #+0]
   \   0000005A   0xF44F 0x7C80      MOV      R12,#+256
   \   0000005E   0x693A             LDR      R2,[R7, #+16]
   \   00000060   0xF890 0xE002      LDRB     LR,[R0, #+2]
   \   00000064   0xFA0C 0xFC0E      LSL      R12,R12,LR
   \   00000068   0xEA22 0x020C      BIC      R2,R2,R12
   \   0000006C   0x613A             STR      R2,[R7, #+16]
   \   0000006E   0x6832             LDR      R2,[R6, #+0]
   \   00000070   0xF890 0xC002      LDRB     R12,[R0, #+2]
   \   00000074   0xFA01 0xF10C      LSL      R1,R1,R12
   \   00000078   0xEA22 0x0101      BIC      R1,R2,R1
   \   0000007C   0xE00C             B.N      ??CrossCallReturnLabel_1
   \                     ??USBDHAL_AbortAllTransfers_3: (+1)
   \   0000007E   0x6879             LDR      R1,[R7, #+4]
   \   00000080   0x4011             ANDS     R1,R2,R1
   \   00000082   0x6079             STR      R1,[R7, #+4]
   \   00000084   0xF44F 0x3280      MOV      R2,#+65536
   \   00000088   0x6939             LDR      R1,[R7, #+16]
   \   0000008A   0x.... 0x....      BL       ?Subroutine0
    148                  }
   \                     ??CrossCallReturnLabel_0: (+1)
   \   0000008E   0x6139             STR      R1,[R7, #+16]
   \   00000090   0x2280             MOVS     R2,#+128
   \   00000092   0x6831             LDR      R1,[R6, #+0]
   \   00000094   0x.... 0x....      BL       ?Subroutine0
   \                     ??CrossCallReturnLabel_1: (+1)
   \   00000098   0x6031             STR      R1,[R6, #+0]
    149                  callback( reason, ep->xferred, ep->remaining );
   \                     ??USBDHAL_AbortAllTransfers_2: (+1)
   \   0000009A   0x6902             LDR      R2,[R0, #+16]
   \   0000009C   0x6941             LDR      R1,[R0, #+20]
   \   0000009E   0x4620             MOV      R0,R4
   \   000000A0   0x4798             BLX      R3
    150                }
    151              }
    152            }
   \                     ??USBDHAL_AbortAllTransfers_1: (+1)
   \   000000A2   0x1C6D             ADDS     R5,R5,#+1
   \   000000A4   0x2D04             CMP      R5,#+4
   \   000000A6   0xDBB0             BLT.N    ??USBDHAL_AbortAllTransfers_0
    153          }
   \   000000A8   0xBDF1             POP      {R0,R4-R7,PC}    ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \   00000000   0xF890 0xC002      LDRB     R12,[R0, #+2]
   \   00000004   0xFA02 0xF20C      LSL      R2,R2,R12
   \   00000008   0x4391             BICS     R1,R1,R2
   \   0000000A   0x4770             BX       LR
    154          
    155          #ifdef VBUSMON
    156          //Use a selectable IRQ for monitoring VBUS on VBUSMON.

   \                                 In section .text, align 2, keep-with-next
    157          void vbusMonCfg(void)
    158          {
   \                     vbusMonCfg: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    159            //VBUSMON just needs to be a simple input.
    160            VBUSMON_SETCFG();
   \   00000002   0x....             LDR.N    R0,??DataTable6_1  ;; 0x4000b000
   \   00000004   0x....             LDR.N    R3,??DataTable6_7  ;; 0xe000e180
   \   00000006   0x6801             LDR      R1,[R0, #+0]
   \   00000008   0x....             LDR.N    R4,??DataTable6_8  ;; 0x4000bc24
   \   0000000A   0xF421 0x4170      BIC      R1,R1,#0xF000
   \   0000000E   0xF441 0x4180      ORR      R1,R1,#0x4000
   \   00000012   0x6001             STR      R1,[R0, #+0]
    161          
    162            //start from a fresh state, just in case
    163            VBUSMON_INTCFG = 0;              //disable triggering
   \   00000014   0x2200             MOVS     R2,#+0
   \   00000016   0x....             LDR.N    R1,??DataTable6_9  ;; 0x4000a814
   \   00000018   0x658A             STR      R2,[R1, #+88]
    164            INT_CFGCLR = VBUSMON_INT_EN_BIT; //clear top level int enable
   \   0000001A   0xF44F 0x4200      MOV      R2,#+32768
   \   0000001E   0x601A             STR      R2,[R3, #+0]
    165            INT_GPIOFLAG = VBUSMON_FLAG_BIT; //clear stale interrupt
   \   00000020   0x2308             MOVS     R3,#+8
   \   00000022   0x600B             STR      R3,[R1, #+0]
    166            INT_MISS = VBUSMON_MISS_BIT;     //clear stale missed interrupt
   \   00000024   0x60CA             STR      R2,[R1, #+12]
    167            //configure
    168            VBUSMON_SEL();             //point IRQ at the desired pin
   \   00000026   0x2303             MOVS     R3,#+3
   \   00000028   0x6023             STR      R3,[R4, #+0]
    169            VBUSMON_INTCFG  = ((0 << GPIO_INTFILT_BIT) | //no filter
    170                               (3 << GPIO_INTMOD_BIT));  //3 = both edges
   \   0000002A   0x2360             MOVS     R3,#+96
   \   0000002C   0x658B             STR      R3,[R1, #+88]
    171            
    172            usbVbusPresent = ((VBUSMON_IN & VBUSMON) == VBUSMON);
   \   0000002E   0x6880             LDR      R0,[R0, #+8]
   \   00000030   0x....             LDR.N    R1,??DataTable6
   \   00000032   0x08C0             LSRS     R0,R0,#+3
   \   00000034   0xF000 0x0001      AND      R0,R0,#0x1
   \   00000038   0x7008             STRB     R0,[R1, #+0]
    173            
    174            INT_CFGSET = VBUSMON_INT_EN_BIT; //set top level interrupt enable
   \   0000003A   0x....             LDR.N    R0,??DataTable6_10  ;; 0xe000e100
   \   0000003C   0x6002             STR      R2,[R0, #+0]
    175          }
   \   0000003E   0xBD10             POP      {R4,PC}          ;; return
    176          #endif //VBUSMON
    177          
    178          #ifndef EMBER_APPLICATION_HAS_CUSTOM_SUSPEND_CALLBACK

   \                                 In section .bss, align 4
    179            uint32_t savedPeripheralReg;
   \                     savedPeripheralReg:
   \   00000000                      DS8 4

   \                                 In section .text, align 2, keep-with-next
    180            void halSuspendCallback(void)
    181            {
   \                     halSuspendCallback: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    182              halSuspend();
   \   00000002   0x.... 0x....      BL       halSuspend
    183              savedPeripheralReg = PERIPHERAL_DISABLE;
   \   00000006   0x....             LDR.N    R0,??DataTable6_11  ;; 0x40004038
   \   00000008   0x....             LDR.N    R2,??DataTable6_12
   \   0000000A   0x6801             LDR      R1,[R0, #+0]
   \   0000000C   0x6011             STR      R1,[R2, #+0]
    184              PERIPHERAL_DISABLE |= ((1 << PERIDIS_ADC_BIT) |   \
    185                                     (1 << PERIDIS_TIM2_BIT)|   \
    186                                     (1 << PERIDIS_TIM1_BIT)|   \
    187                                     (1 << PERIDIS_SC1_BIT) |   \
    188                                     (1 << PERIDIS_SC2_BIT));
   \   0000000E   0x6801             LDR      R1,[R0, #+0]
   \   00000010   0xF041 0x011F      ORR      R1,R1,#0x1F
   \   00000014   0x6001             STR      R1,[R0, #+0]
    189            }
   \   00000016   0xBD01             POP      {R0,PC}          ;; return
    190          

   \                                 In section .text, align 2, keep-with-next
    191            void halResumeCallback(void)
    192            {
    193              PERIPHERAL_DISABLE = savedPeripheralReg;
   \                     halResumeCallback: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable6_12
   \   00000002   0x....             LDR.N    R1,??DataTable6_11  ;; 0x40004038
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x6008             STR      R0,[R1, #+0]
    194              halResume();
   \   00000008   0x.... 0x....      B.W      halResume
    195            }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   0x........         DC32     usbVbusPresent

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_1:
   \   00000000   0x4000B000         DC32     0x4000b000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_2:
   \   00000000   0x40011000         DC32     0x40011000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_3:
   \   00000000   0x........         DC32     usbBufferA

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_4:
   \   00000000   0x4000A88C         DC32     0x4000a88c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_5:
   \   00000000   0x4001104C         DC32     0x4001104c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_6:
   \   00000000   0x........         DC32     dev

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_7:
   \   00000000   0xE000E180         DC32     0xe000e180

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_8:
   \   00000000   0x4000BC24         DC32     0x4000bc24

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_9:
   \   00000000   0x4000A814         DC32     0x4000a814

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_10:
   \   00000000   0xE000E100         DC32     0xe000e100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_11:
   \   00000000   0x40004038         DC32     0x40004038

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_12:
   \   00000000   0x........         DC32     savedPeripheralReg
    196          #endif // EMBER_APPLICATION_HAS_CUSTOM_SUSPEND_CALLBACK
    197          
    198          
    199          /** @endcond */
    200          #endif //CORTEXM3_EM35X_USB
    201          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      24   USBDHAL_AbortAllTransfers
        24   -- Indirect call
       8   USBDHAL_Connect
         8   -> vbusMonCfg
       8   USBDHAL_CoreInit
         8   -> halCommonMemSet
       0   USBDHAL_Disconnect
       0   halResumeCallback
         0   -> halResume
       8   halSuspendCallback
         8   -> halSuspend
       8   vbusMonCfg


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable6
       4  ??DataTable6_1
       4  ??DataTable6_10
       4  ??DataTable6_11
       4  ??DataTable6_12
       4  ??DataTable6_2
       4  ??DataTable6_3
       4  ??DataTable6_4
       4  ??DataTable6_5
       4  ??DataTable6_6
       4  ??DataTable6_7
       4  ??DataTable6_8
       4  ??DataTable6_9
      12  ?Subroutine0
      28  EPINBUF
      28  EPINBUFSIZE
      28  EPOUTBUF
      28  EPOUTBUFSIZE
     170  USBDHAL_AbortAllTransfers
      32  USBDHAL_Connect
      52  USBDHAL_CoreInit
      20  USBDHAL_Disconnect
      12  halResumeCallback
      24  halSuspendCallback
       4  savedPeripheralReg
    1392  usbBufferA
       1  usbVbusPresent
      64  vbusMonCfg

 
 1 397 bytes in section .bss
   112 bytes in section .data
   438 bytes in section .text
 
   438 bytes of CODE memory
 1 509 bytes of DATA memory

Errors: none
Warnings: none
