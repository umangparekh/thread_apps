###############################################################################
#
# IAR ANSI C/C++ Compiler V7.30.1.7746/W32 for ARM        28/Sep/2015  14:43:24
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\SiliconLabs\Thread-1.0.1\hal\micro\cortexm3\usb\cdc\callbacks.c
#    Command line =  
#        C:\SiliconLabs\Thread-1.0.1\hal\micro\cortexm3\usb\cdc\callbacks.c -D
#        APP_BTL -D CORTEXM3 -D CORTEXM3_EMBER_MICRO -D CORTEXM3_EM3588 -D
#        PHY_EM3XX -D "BOARD_HEADER=\"thread-board.h\"" -D
#        "CONFIGURATION_HEADER=\"thread-configuration.h\"" -D
#        "PLATFORM_HEADER=\"hal/micro/cortexm3/compiler/iar.h\"" -D
#        "__SOURCEFILE__=\"callbacks.c\"" -D BOARD_DEV0680ETM -D
#        "EMBER_AF_API_EMBER_TYPES=\"stack/include/ember-types.h\"" -D
#        EMBER_STACK_IP -D EMBER_RIP_STACK -D HAVE_TLS_JPAKE -D
#        DEBUG_LEVEL=FULL_DEBUG -D
#        "APPLICATION_TOKEN_HEADER=\"thread-token.h\"" -lC
#        C:\SiliconLabs\Thread-1.0.1\app\Thread_Sample_Client\build\lst\
#        --diag_suppress Pa050 -o
#        C:\SiliconLabs\Thread-1.0.1\app\Thread_Sample_Client\build\obj\
#        --debug --endian=little --cpu=Cortex-M3 --no_path_in_file_macros
#        --separate_cluster_for_initialized_variables -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\SiliconLabs\Thread-1.0.1\hal\micro\cortexm3\usb\cdc\ -I
#        C:\SiliconLabs\Thread-1.0.1\app\Thread_Sample_Client\ -I
#        C:\SiliconLabs\Thread-1.0.1\app\Thread_Sample_Client\..\..\ -I
#        C:\SiliconLabs\Thread-1.0.1\app\Thread_Sample_Client\..\..\app\util\
#        -I C:\SiliconLabs\Thread-1.0.1\app\Thread_Sample_Client\..\..\stack\
#        -I C:\SiliconLabs\Thread-1.0.1\app\Thread_Sample_Client\..\..\hal\ -I
#        C:\SiliconLabs\Thread-1.0.1\app\Thread_Sample_Client\..\..\hal\..\
#        -Ohz --use_c++_inline
#    List file    =  
#        C:\SiliconLabs\Thread-1.0.1\app\Thread_Sample_Client\build\lst\callbacks.lst
#    Object file  =  
#        C:\SiliconLabs\Thread-1.0.1\app\Thread_Sample_Client\build\obj\callbacks.o
#
###############################################################################

C:\SiliconLabs\Thread-1.0.1\hal\micro\cortexm3\usb\cdc\callbacks.c
      1          
      2          #include PLATFORM_HEADER
      3          #include "stack/include/ember.h"
      4          #include "hal/hal.h"
      5          #include "hal/micro/cortexm3/usb/em_usb.h"
      6          #if defined(CORTEXM3_EM35X_USB) && EM_SERIAL3_ENABLED
      7          #include "descriptors.h"
      8          
      9          /**************************************************************************//**
     10           * @brief
     11           *   Handle USB setup commands. Implements CDC class specific commands.
     12           *
     13           * @param[in] setup Pointer to the setup packet received.
     14           *
     15           * @return USB_STATUS_OK if command accepted.
     16           *         USB_STATUS_REQ_UNHANDLED when command is unknown, the USB device
     17           *         stack will handle the request.
     18           *****************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     19          int SetupCmd(const USB_Setup_TypeDef *setup)
     20          {
   \                     SetupCmd: (+1)
   \   00000000   0x4601             MOV      R1,R0
     21            int retVal = USB_STATUS_REQ_UNHANDLED;
   \   00000002   0xF06F 0x0002      MVN      R0,#+2
     22          
     23            if ((setup->Type == USB_SETUP_TYPE_CLASS) &&
     24                (setup->Recipient == USB_SETUP_RECIPIENT_INTERFACE))
   \   00000006   0x780A             LDRB     R2,[R1, #+0]
   \   00000008   0xF002 0x037F      AND      R3,R2,#0x7F
   \   0000000C   0x2B21             CMP      R3,#+33
   \   0000000E   0xD000             BEQ.N    ??SetupCmd_0
   \   00000010   0x4770             BX       LR
     25            {
     26              switch (setup->bRequest)
   \                     ??SetupCmd_0: (+1)
   \   00000012   0xB580             PUSH     {R7,LR}
   \   00000014   0x784B             LDRB     R3,[R1, #+1]
   \   00000016   0x2B20             CMP      R3,#+32
   \   00000018   0xD00E             BEQ.N    ??SetupCmd_1
   \   0000001A   0xD325             BCC.N    ??SetupCmd_2
   \   0000001C   0x2B22             CMP      R3,#+34
   \   0000001E   0xD016             BEQ.N    ??SetupCmd_3
   \   00000020   0xD222             BCS.N    ??SetupCmd_2
     27              {
     28              case USB_CDC_GETLINECODING:
     29          
     30                #ifdef USB_DEBUG_CDC
     31                DEBUG_BUFFER += sprintf(DEBUG_BUFFER, "CDC_GETLINECODING -> \r\n");
     32                #endif
     33                /********************/
     34                if ((setup->wValue == 0) &&
     35                    (setup->wIndex == 0) &&               /* Interface no.            */
     36                    (setup->wLength == 7) &&              /* Length of cdcLineCoding  */
     37                    (setup->Direction == USB_SETUP_DIR_IN))
   \   00000022   0x884B             LDRH     R3,[R1, #+2]
   \   00000024   0x2B00             CMP      R3,#+0
   \   00000026   0xBF01             ITTTT    EQ 
   \   00000028   0x888B             LDRHEQ   R3,[R1, #+4]
   \   0000002A   0x2B00             CMPEQ    R3,#+0
   \   0000002C   0x88C9             LDRHEQ   R1,[R1, #+6]
   \   0000002E   0x2907             CMPEQ    R1,#+7
   \   00000030   0xD11A             BNE.N    ??SetupCmd_2
   \   00000032   0x09D1             LSRS     R1,R2,#+7
   \   00000034   0xD111             BNE.N    ??SetupCmd_4
   \   00000036   0xBD02             POP      {R1,PC}
     38                {
     39                  /* Send current settings to USB host. */
     40                  // USBD_Write(0, (void*) &cdcLineCoding, 7, NULL);
     41                  USBD_Write(0,NULL,0,NULL);
     42                  retVal = USB_STATUS_OK;
     43                }
     44                break;
     45          
     46              case USB_CDC_SETLINECODING:
     47          
     48                #ifdef USB_DEBUG_CDC
     49                DEBUG_BUFFER += sprintf(DEBUG_BUFFER, "CDC_SETLINECODING -> \r\n");
     50                #endif
     51                /********************/
     52                if ((setup->wValue == 0) &&
     53                    (setup->wIndex == 0) &&               /* Interface no.            */
     54                    (setup->wLength == 7) &&              /* Length of cdcLineCoding  */
     55                    (setup->Direction != USB_SETUP_DIR_IN))
   \                     ??SetupCmd_1: (+1)
   \   00000038   0x884B             LDRH     R3,[R1, #+2]
   \   0000003A   0x2B00             CMP      R3,#+0
   \   0000003C   0xBF01             ITTTT    EQ 
   \   0000003E   0x888B             LDRHEQ   R3,[R1, #+4]
   \   00000040   0x2B00             CMPEQ    R3,#+0
   \   00000042   0x88C9             LDRHEQ   R1,[R1, #+6]
   \   00000044   0x2907             CMPEQ    R1,#+7
   \   00000046   0xD10F             BNE.N    ??SetupCmd_2
   \   00000048   0x09D1             LSRS     R1,R2,#+7
   \   0000004A   0xD10D             BNE.N    ??SetupCmd_2
   \   0000004C   0xE005             B.N      ??SetupCmd_4
     56                {
     57                  /* Get new settings from USB host. */
     58                  // USBD_Read(0, (void*) &cdcLineCoding, 7, LineCodingReceived);
     59          
     60                  
     61                  USBD_Write(0,NULL,0,NULL);
     62          
     63                  // USBD_Read(0,NULL,7,NULL);
     64                  retVal = USB_STATUS_OK;
     65                }
     66                break;
     67          
     68              case USB_CDC_SETCTRLLINESTATE:
     69                #ifdef USB_DEBUG_CDC
     70                DEBUG_BUFFER += sprintf(DEBUG_BUFFER, "CDC_SETLINESTATE -> \r\n");
     71                #endif
     72                /********************/
     73                if ((setup->wIndex == 0) &&               /* Interface no.  */
     74                    (setup->wLength == 0))                /* No data        */
   \                     ??SetupCmd_3: (+1)
   \   0000004E   0x888A             LDRH     R2,[R1, #+4]
   \   00000050   0x2A00             CMP      R2,#+0
   \   00000052   0xBF04             ITT      EQ 
   \   00000054   0x88C9             LDRHEQ   R1,[R1, #+6]
   \   00000056   0x2900             CMPEQ    R1,#+0
   \   00000058   0xD106             BNE.N    ??SetupCmd_2
     75                {
     76                  /* Do nothing ( Non compliant behaviour !! ) */
     77                  USBD_Write(0,NULL,0,NULL);
   \                     ??SetupCmd_4: (+1)
   \   0000005A   0x2200             MOVS     R2,#+0
   \   0000005C   0x4611             MOV      R1,R2
   \   0000005E   0x2300             MOVS     R3,#+0
   \   00000060   0x4608             MOV      R0,R1
   \   00000062   0x.... 0x....      BL       USBD_Write
     78                  retVal = USB_STATUS_OK;
   \   00000066   0x2000             MOVS     R0,#+0
     79                }
     80                break;
     81              }
     82            }
     83          
     84            return retVal;
   \                     ??SetupCmd_2: (+1)
   \   00000068   0xBD02             POP      {R1,PC}          ;; return
     85          }
     86          

   \                                 In section .text, align 2, keep-with-next
     87          void stateChange(USBD_State_TypeDef oldState, USBD_State_TypeDef newState)
     88          {
     89            /* Print state transition to debug output */
     90            // emberSerialPrintf(SER232,"%s => %s\r\n", USBD_GetUsbStateName(oldState), USBD_GetUsbStateName(newState));
     91            
     92            if (newState == USBD_STATE_CONFIGURED)
   \                     stateChange: (+1)
   \   00000000   0x2904             CMP      R1,#+4
   \   00000002   0xD000             BEQ.N    ??stateChange_0
   \   00000004   0x4770             BX       LR
     93            {
     94              /* Start waiting for the 'tick' messages */
     95              // emberSerialPrintf(SER232,"starting read\r\n");
     96              uint8_t t='\r';
   \                     ??stateChange_0: (+1)
   \   00000006   0xB580             PUSH     {R7,LR}
   \   00000008   0x200D             MOVS     R0,#+13
   \   0000000A   0xF88D 0x0000      STRB     R0,[SP, #+0]
     97          
     98              USBD_Read(EP_DATA_OUT, &t, 1, NULL);
   \   0000000E   0x2300             MOVS     R3,#+0
   \   00000010   0x2201             MOVS     R2,#+1
   \   00000012   0xA900             ADD      R1,SP,#+0
   \   00000014   0x2005             MOVS     R0,#+5
   \   00000016   0x.... 0x....      BL       USBD_Read
     99              
    100            }
    101          }
   \   0000001A   0xBD01             POP      {R0,PC}          ;; return
    102          
    103          #endif //CORTEXM3_EM35X_USB && EM_SERIAL3_ENABLED
    104          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   SetupCmd
         8   -> USBD_Write
       8   stateChange
         8   -> USBD_Read


   Section sizes:

   Bytes  Function/Label
   -----  --------------
     106  SetupCmd
      28  stateChange

 
 134 bytes in section .text
 
 134 bytes of CODE memory

Errors: none
Warnings: none
