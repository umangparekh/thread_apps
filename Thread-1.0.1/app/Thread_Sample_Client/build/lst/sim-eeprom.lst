###############################################################################
#
# IAR ANSI C/C++ Compiler V7.30.1.7746/W32 for ARM        28/Sep/2015  14:43:35
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  C:\SiliconLabs\Thread-1.0.1\hal\micro\generic\sim-eeprom.c
#    Command line =  
#        C:\SiliconLabs\Thread-1.0.1\hal\micro\generic\sim-eeprom.c -D APP_BTL
#        -D CORTEXM3 -D CORTEXM3_EMBER_MICRO -D CORTEXM3_EM3588 -D PHY_EM3XX -D
#        "BOARD_HEADER=\"thread-board.h\"" -D
#        "CONFIGURATION_HEADER=\"thread-configuration.h\"" -D
#        "PLATFORM_HEADER=\"hal/micro/cortexm3/compiler/iar.h\"" -D
#        "__SOURCEFILE__=\"sim-eeprom.c\"" -D BOARD_DEV0680ETM -D
#        "EMBER_AF_API_EMBER_TYPES=\"stack/include/ember-types.h\"" -D
#        EMBER_STACK_IP -D EMBER_RIP_STACK -D HAVE_TLS_JPAKE -D
#        DEBUG_LEVEL=FULL_DEBUG -D
#        "APPLICATION_TOKEN_HEADER=\"thread-token.h\"" -lC
#        C:\SiliconLabs\Thread-1.0.1\app\Thread_Sample_Client\build\lst\
#        --diag_suppress Pa050 -o
#        C:\SiliconLabs\Thread-1.0.1\app\Thread_Sample_Client\build\obj\
#        --debug --endian=little --cpu=Cortex-M3 --no_path_in_file_macros
#        --separate_cluster_for_initialized_variables -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\SiliconLabs\Thread-1.0.1\hal\micro\generic\ -I
#        C:\SiliconLabs\Thread-1.0.1\app\Thread_Sample_Client\ -I
#        C:\SiliconLabs\Thread-1.0.1\app\Thread_Sample_Client\..\..\ -I
#        C:\SiliconLabs\Thread-1.0.1\app\Thread_Sample_Client\..\..\app\util\
#        -I C:\SiliconLabs\Thread-1.0.1\app\Thread_Sample_Client\..\..\stack\
#        -I C:\SiliconLabs\Thread-1.0.1\app\Thread_Sample_Client\..\..\hal\ -I
#        C:\SiliconLabs\Thread-1.0.1\app\Thread_Sample_Client\..\..\hal\..\
#        -Ohz --use_c++_inline
#    List file    =  
#        C:\SiliconLabs\Thread-1.0.1\app\Thread_Sample_Client\build\lst\sim-eeprom.lst
#    Object file  =  
#        C:\SiliconLabs\Thread-1.0.1\app\Thread_Sample_Client\build\obj\sim-eeprom.o
#
###############################################################################

C:\SiliconLabs\Thread-1.0.1\hal\micro\generic\sim-eeprom.c
      1          #include PLATFORM_HEADER
      2          #include "stack/include/ember.h"
      3          #include "stack/include/error.h"
      4          #include "hal/hal.h"
      5          #include "serial/serial.h"
      6          
      7          #include "hal/micro/sim-eeprom.h"
      8          
      9          #ifdef CORTEXM3
     10            //On the Cortex-M3 chips we define a variable that holds the actual
     11            //SimEE storage and then place this storage at the proper location
     12            //in the linker.
     13            #ifdef EMBER_TEST
     14              uint8_t simulatedEepromStorage[SIMEE_SIZE_B];
     15            #else //EMBER_TEST

   \                                 In section SIMEE, align 4, root
     16              VAR_AT_SEGMENT(NO_STRIPPING uint8_t simulatedEepromStorage[SIMEE_SIZE_B], __SIMEE__);
   \                     simulatedEepromStorage:
   \   00000000                      DS8 8192
     17            #endif //EMBER_TEST
     18            //sim-eeprom-internal.c uses a set of defines that parameterize its behavior.
     19            //Since the -internal file is precompiled, we must externally define the
     20            //parameters (as constants) so an application build can alter them.

   \                                 In section .rodata, align 1, keep-with-next
     21            const uint8_t REAL_PAGES_PER_VIRTUAL = ((SIMEE_SIZE_HW/FLASH_PAGE_SIZE_HW)/2);
   \                     REAL_PAGES_PER_VIRTUAL:
   \   00000000   0x02               DC8 2

   \                                 In section .rodata, align 2, keep-with-next
     22            const uint16_t REAL_PAGE_SIZE = FLASH_PAGE_SIZE_HW;
   \                     REAL_PAGE_SIZE:
   \   00000000   0x0400             DC16 1024

   \                                 In section .rodata, align 2, keep-with-next
     23            const uint16_t LEFT_BASE = SIMEE_BASE_ADDR_HW;
   \                     LEFT_BASE:
   \   00000000   0x0000             DC16 0

   \                                 In section .rodata, align 2, keep-with-next
     24            const uint16_t LEFT_TOP = ((SIMEE_BASE_ADDR_HW + (FLASH_PAGE_SIZE_HW *
   \                     LEFT_TOP:
   \   00000000   0x07FF             DC16 2047
     25                                    ((SIMEE_SIZE_HW / FLASH_PAGE_SIZE_HW) / 2))) - 1);

   \                                 In section .rodata, align 2, keep-with-next
     26            const uint16_t RIGHT_BASE = (SIMEE_BASE_ADDR_HW + (FLASH_PAGE_SIZE_HW *
   \                     RIGHT_BASE:
   \   00000000   0x0800             DC16 2048
     27                                      ((SIMEE_SIZE_HW / FLASH_PAGE_SIZE_HW) / 2)));

   \                                 In section .rodata, align 2, keep-with-next
     28            const uint16_t RIGHT_TOP = (SIMEE_BASE_ADDR_HW + (SIMEE_SIZE_HW - 1));
   \                     RIGHT_TOP:
   \   00000000   0x0FFF             DC16 4095

   \                                 In section .rodata, align 2, keep-with-next
     29            const uint16_t ERASE_CRITICAL_THRESHOLD = (SIMEE_SIZE_HW / 4);
   \                     ERASE_CRITICAL_THRESHOLD:
   \   00000000   0x0400             DC16 1024
     30          #endif //CORTEXM3
     31          

   \                                 In section .rodata, align 2, keep-with-next
     32          const uint16_t ID_COUNT = TOKEN_COUNT;
   \                     ID_COUNT:
   \   00000000   0x000B             DC16 11
     33          
     34          #define DEFINETOKENS
     35          //Manufacturing tokens do not exist in the SimEEPROM -define to nothing
     36          #define TOKEN_MFG(name,creator,iscnt,isidx,type,arraysize,...)
     37          
     38          //Fundamental limitations of the Simulated EEPROM design:
     39          //These limitations are forcefully enforced via compile-time errors
     40          //in the declarations that follow because exceeding any of them will
     41          //cause fatal operation and data corruption.
     42          //(1) The maximum number of tokens that can be stored is 254.
     43          //    (Tokens are identified by one-byte values, with 0xFF as invalid.)
     44          //(2) The maximum size, in bytes, of a token (element) is 254.
     45          //    (One byte, with 0xFF as invalid)
     46          //(3) The maximum number of elements in an indexed token is 126.
     47          //    (One byte, with MSB used as counter flag and 0x7F as non-indexed size.)
     48          //(4) The maximum total storage for tokens plus management is SIMEE_BTS_SIZE_B/2.
     49          //    (This limit is due to a Virtual Page only being a limited size and for
     50          //     the Simulated EEPROM to operate with any kind of efficiency, the
     51          //     Base Storage must be small enough to leave room for token copies.)
     52          
     53          //If the arraysize is exactly 1, we need only a single entry in the ptrCache
     54          //to hold this entry.  If the arraysize is not 1, we need +1 to hold
     55          //the redirection entry in the Primary Table and then arraysize entries in
     56          //the indexed table.  This works for all values of arraysize.
     57          #define TOKEN_DEF(name,creator,iscnt,isidx,type,arraysize,...) \
     58            + ((arraysize < 127/*fundamental limit (3)*/)                \
     59               ? (arraysize + ((arraysize==1) ? 0 : 1))                  \
     60               : -10000/*force negative array length compile-time error*/)
     61            //value of all index counts added together

   \                                 In section .rodata, align 2, keep-with-next
     62            const uint16_t PTR_CACHE_SIZE = ( 0
   \                     PTR_CACHE_SIZE:
   \   00000000   0x001B             DC16 27
     63              #include "stack/config/token-stack.h"
     64            );
     65            //the ptrCache definition - used to provide efficient access, based upon
     66            //ID and index, to the freshest data in the Simulated EEPROM.

   \                                 In section .bss, align 4
     67            uint16_t ptrCache[ 0 //Compiler error here means too many elements in an array token
   \                     ptrCache:
   \   00000000                      DS8 56
     68              #include "stack/config/token-stack.h"
     69            ];
     70          #undef TOKEN_DEF
     71          
     72          //*totalTokenStorage notes the initial allocation of token data words
     73          //in the flash virtual page. It is checked against the limit
     74          //SIMEE_BTS_SIZE_B/2.
     75          #define TOKEN_DEF(name,creator,iscnt,isidx,type,arraysize,...) \
     76            + (arraysize * (1/*info word*/ + BYTES_TO_WORDS(sizeof(type)) \
     77                            + ((!!iscnt) * BYTES_TO_WORDS(COUNTER_TOKEN_PAD))))

   \                                 In section .rodata, align 4, keep-with-next
     78            const uint32_t totalTokenStorage[(0 //Compiler error here means total token storage exceeds limit
   \                     totalTokenStorage:
   \   00000000   0x000000F3         DC32 243
     79              + (TOKEN_COUNT*2) 
     80              #include "stack/config/token-stack.h"
     81              ) <= (SIMEE_BTS_SIZE_B/2)/*fundamental limit (4)*/
     82              ? 1 : -1/*negative forces compile-time error*/
     83            ] = { (TOKEN_COUNT*2)
     84              #include "stack/config/token-stack.h"
     85            };
     86          #undef TOKEN_DEF
     87          
     88          //The Size Cache definition.  Links the token to its internal storage size
     89          //for efficient calculations.  Indexed by compile ID.  Size is in words.
     90          //This Cache should be used for all size calculations.  halInternalSimEeStartup
     91          //will guarantee that the compiled sizes defining this cache match the
     92          //stored sizes.
     93          //NOTE: All counter tokens have the COUNTER_TOKEN_PAD
     94          //      added to provide room for the incremarks.
     95          #define TOKEN_DEF(name,creator,iscnt,isidx,type,arraysize,...) \
     96            + ((sizeof(type) < 255/*fundamental limit (2)*/)             \
     97               ? 1 : -10000/*large negative will force compile-time error*/)

   \                                 In section .rodata, align 4, keep-with-next
     98            const uint8_t sizeCache[ 0 //Compiler error here means a token's size is too large
   \                     sizeCache:
   \   00000000   0x01 0x1B          DC8 1, 27, 27, 27, 27, 4, 4, 4, 40, 2, 2, 0
   \              0x1B 0x1B    
   \              0x1B 0x04    
   \              0x04 0x04    
   \              0x28 0x02    
   \              0x02 0x00    
     99              #include "stack/config/token-stack.h"
    100            ] = {
    101          #undef TOKEN_DEF
    102          #define TOKEN_DEF(name,creator,iscnt,isidx,type,arraysize,...) \
    103            (BYTES_TO_WORDS(sizeof(type))                                \
    104             + (iscnt ? BYTES_TO_WORDS(COUNTER_TOKEN_PAD) : 0)),
    105              #include "stack/config/token-stack.h"
    106            };
    107          #undef TOKEN_DEF
    108          
    109          #undef TOKEN_MFG
    110          #undef DEFINETOKENS
    111          
    112          EmberStatus halInternalSimEeStartupCore(bool forceRebuildAll, 
    113                                                  uint8_t *lookupCache);
    114          
    115          //This function is called before startup core.  It will check
    116          //the flash to see if SimEE version 2 already exists in the flash.  If found,
    117          //it will assert.  The purpose of this check is to assist developers
    118          //by catching an accidental downgrade.
    119          //There is no downgrade path, but users of SimEE2 might accidentally load
    120          //a system that was built for SimEE1 use onto a chip that already had SimEE2.
    121          //The check for existence can be ignored if a chip really wants to be
    122          //downgraded knowing all SimEE based token data will be lost.
    123          //The other option is to load an image that explicitely has SimEE set to
    124          //0xFFF, or just a mass erase of the chip first.
    125          bool checkForSimEe2DataExistence(uint32_t simEe2offset);
    126          
    127          

   \                                 In section .text, align 2, keep-with-next
    128          EmberStatus halInternalSimEeStartup(bool forceRebuildAll)
    129          {
   \                     halInternalSimEeStartup: (+1)
   \   00000000   0xE92D 0x4FFE      PUSH     {R1-R11,LR}
   \   00000004   0x4680             MOV      R8,R0
    130            // lookupCache must be declared here, outside the library so that it can
    131            //  be appropriately sized based on the number of tokens the application
    132            //  uses.
    133            uint8_t lookupCache[ 0 //Compiler error here means too many tokens declared
    134                              + (TOKEN_COUNT < 255/*fundamental limit (1)*/
    135                                 ? TOKEN_COUNT : -1/*force compile-time error*/) ];
    136            uint8_t i;
    137            uint32_t indexSkip = TOKEN_COUNT;
   \   00000006   0x250B             MOVS     R5,#+11
    138            
    139            //The value 0xFF is used as a trigger in both caches to indicate an
    140            //uninitialized entry.  Unitialized entries (i.e. missing tokens) will
    141            //trigger repairing.
    142            MEMSET(lookupCache, 0xFF, ID_COUNT);
   \   00000008   0x220B             MOVS     R2,#+11
   \   0000000A   0x21FF             MOVS     R1,#+255
   \   0000000C   0xA800             ADD      R0,SP,#+0
   \   0000000E   0x.... 0x....      BL       halCommonMemSet
    143            MEMSET(ptrCache, 0xFF, PTR_CACHE_SIZE*sizeof(uint16_t));
   \   00000012   0x.... 0x....      LDR.W    R10,??DataTable14
   \   00000016   0x2236             MOVS     R2,#+54
   \   00000018   0x21FF             MOVS     R1,#+255
   \   0000001A   0x4650             MOV      R0,R10
   \   0000001C   0x.... 0x....      BL       halCommonMemSet
    144            
    145            for(i = 0; i < TOKEN_COUNT; i++) {
   \   00000020   0x2700             MOVS     R7,#+0
   \   00000022   0x....             LDR.N    R4,??DataTable14_1
   \   00000024   0x.... 0x....      LDR.W    R9,??DataTable14_2
   \   00000028   0x....             LDR.N    R6,??DataTable14_3
    146              uint32_t size = BYTES_TO_WORDS(tokenSize[i]);
   \                     ??halInternalSimEeStartup_0: (+1)
   \   0000002A   0x5DB8             LDRB     R0,[R7, R6]
    147              uint32_t arraySize = tokenArraySize[i];
   \   0000002C   0xF817 0xB009      LDRB     R11,[R7, R9]
    148              if(tokenIsCnt[i])
   \   00000030   0x5D39             LDRB     R1,[R7, R4]
   \   00000032   0x1C40             ADDS     R0,R0,#+1
   \   00000034   0xEB00 0x70D0      ADD      R0,R0,R0, LSR #+31
   \   00000038   0x1040             ASRS     R0,R0,#+1
   \   0000003A   0xB101             CBZ.N    R1,??halInternalSimEeStartup_1
    149                size += BYTES_TO_WORDS(COUNTER_TOKEN_PAD);
   \   0000003C   0x3019             ADDS     R0,R0,#+25
    150          
    151              emberDebugPrintf("Creator: 0x%2X, Words: %d\n",
    152                               tokenCreators[i],
    153                               // we cast this to 16-bit to make it readable in decimal
    154                               // (var args default to 'int' which is 16-bit on xap)
    155                               // there should be no token who's size is greater than 65k
    156                               (uint16_t)(arraySize * (1 + size)));
   \                     ??halInternalSimEeStartup_1: (+1)
   \   0000003E   0x1C40             ADDS     R0,R0,#+1
   \   00000040   0xFB00 0xF20B      MUL      R2,R0,R11
   \   00000044   0x....             LDR.N    R0,??DataTable14_4
   \   00000046   0xF830 0x1017      LDRH     R1,[R0, R7, LSL #+1]
   \   0000004A   0x.... 0x....      ADR.W    R0,?_0
   \   0000004E   0xB292             UXTH     R2,R2
   \   00000050   0x.... 0x....      BL       emberDebugPrintf
    157                               //The '1 +' is for the initial info word in each token.
    158          
    159              //Install the indexed token ptrCache redirection value.  If a token is
    160              //indexed, set the ptrCache equal to the index number of where the
    161              //actual token addresses start in the ptrCache.
    162              if(arraySize != 1) {
   \   00000054   0xF1BB 0x0F01      CMP      R11,#+1
   \   00000058   0xBF1C             ITT      NE 
   \   0000005A   0xF82A 0x5017      STRHNE   R5,[R10, R7, LSL #+1]
   \   0000005E   0x445D             ADDNE    R5,R11,R5
    163                ptrCache[i] = indexSkip;
    164                indexSkip += arraySize;
    165              }
    166            }
   \   00000060   0x1C7F             ADDS     R7,R7,#+1
   \   00000062   0x2F0B             CMP      R7,#+11
   \   00000064   0xDBE1             BLT.N    ??halInternalSimEeStartup_0
    167          
    168            // Again, we force 32-bit into 16-bit for printing purposes.  The var args
    169            // default to 'int' which is 16-bit on the xap.  We should never exceed
    170            // 65k words for any of these values, so we are okay.
    171            emberDebugPrintf("SimEE data: %d words of %d max, tokenCount: %d\n",
    172                             (uint16_t)*totalTokenStorage,
    173                             (uint16_t)(SIMEE_BTS_SIZE_B/2),
    174                             (uint16_t)TOKEN_COUNT);
   \   00000066   0x.... 0x....      ADR.W    R0,?_1
   \   0000006A   0x230B             MOVS     R3,#+11
   \   0000006C   0xF240 0x421C      MOVW     R2,#+1052
   \   00000070   0x21F3             MOVS     R1,#+243
   \   00000072   0x.... 0x....      BL       emberDebugPrintf
    175          
    176          #ifndef XAP2B //SimEE2 doesn't exist for XAP2b, but this code is shared.
    177          #ifdef SIM_EEPROM_TEST
    178          //Undefine the assert when run the unit test for check for SimEE2.
    179          #undef assert
    180          #define assert(condition)
    181          #endif //SIM_EEPROM_TEST
    182            {
    183              bool simEe2Found = false;
    184              //These are the offsets from where SimEE1 is stored down to where
    185              //SimEE2 Virtual Page A, Page B, and Page C are stored.
    186              //These values are subtracted off of simulatedEepromStorage[] to get the
    187              //locations of where SimEE2's use of simulatedEepromStorage[] would be.
    188              //Instead of using a for loop, by calling the check for each address
    189              //if an assert occurs it will help the developer know exactly which Virtual
    190              //Page was found.
    191              //The the prototype for this function at the top of this file for more
    192              //information.
    193          #ifdef EMBER_SIMEE1_4KB
    194              simEe2Found = checkForSimEe2DataExistence(0x8000);
    195              assert(simEe2Found == false);
    196              simEe2Found = checkForSimEe2DataExistence(0x5000);
    197              assert(simEe2Found == false);
    198              simEe2Found = checkForSimEe2DataExistence(0x2000);
    199              assert(simEe2Found == false);
    200          #else //EMBER_SIMEE1_8KB
    201              simEe2Found = checkForSimEe2DataExistence(0x7000);
    202              assert(simEe2Found == false);
   \   00000076   0x.... 0x....      ADR.W    R5,?_2
   \   0000007A   0xF44F 0x40E0      MOV      R0,#+28672
   \   0000007E   0x.... 0x....      BL       checkForSimEe2DataExistence
   \   00000082   0xB118             CBZ.N    R0,??halInternalSimEeStartup_2
   \   00000084   0x21CA             MOVS     R1,#+202
   \   00000086   0x4628             MOV      R0,R5
   \   00000088   0x.... 0x....      BL       halInternalAssertFailed
    203              simEe2Found = checkForSimEe2DataExistence(0x4000);
    204              assert(simEe2Found == false);
   \                     ??halInternalSimEeStartup_2: (+1)
   \   0000008C   0xF44F 0x4080      MOV      R0,#+16384
   \   00000090   0x.... 0x....      BL       checkForSimEe2DataExistence
   \   00000094   0xB118             CBZ.N    R0,??halInternalSimEeStartup_3
   \   00000096   0x21CC             MOVS     R1,#+204
   \   00000098   0x4628             MOV      R0,R5
   \   0000009A   0x.... 0x....      BL       halInternalAssertFailed
    205              simEe2Found = checkForSimEe2DataExistence(0x1000);
    206              assert(simEe2Found == false);
   \                     ??halInternalSimEeStartup_3: (+1)
   \   0000009E   0xF44F 0x5080      MOV      R0,#+4096
   \   000000A2   0x.... 0x....      BL       checkForSimEe2DataExistence
   \   000000A6   0xB118             CBZ.N    R0,??halInternalSimEeStartup_4
   \   000000A8   0x21CE             MOVS     R1,#+206
   \   000000AA   0x4628             MOV      R0,R5
   \   000000AC   0x.... 0x....      BL       halInternalAssertFailed
    207          #endif
    208              simEe2Found = simEe2Found;
    209            }
    210          #endif //XAP2B
    211            
    212            return halInternalSimEeStartupCore(forceRebuildAll, lookupCache);
   \                     ??halInternalSimEeStartup_4: (+1)
   \   000000B0   0xA900             ADD      R1,SP,#+0
   \   000000B2   0x4640             MOV      R0,R8
   \   000000B4   0x.... 0x....      BL       halInternalSimEeStartupCore
   \   000000B8   0xE8BD 0x8FFE      POP      {R1-R11,PC}      ;; return
    213          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14:
   \   00000000   0x........         DC32     ptrCache

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_1:
   \   00000000   0x........         DC32     tokenIsCnt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_2:
   \   00000000   0x........         DC32     tokenArraySize

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_3:
   \   00000000   0x........         DC32     tokenSize

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_4:
   \   00000000   0x........         DC32     tokenCreators

   \                                 In section .text, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x43 0x72          DC8 "Creator: 0x%2X, Words: %d\012"
   \              0x65 0x61    
   \              0x74 0x6F    
   \              0x72 0x3A    
   \              0x20 0x30    
   \              0x78 0x25    
   \              0x32 0x58    
   \              0x2C 0x20    
   \              0x57 0x6F    
   \              0x72 0x64    
   \              0x73 0x3A    
   \              0x20 0x25    
   \              0x64 0x0A    
   \              0x00         
   \   0000001B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_1:
   \   00000000   0x53 0x69          DC8 "SimEE data: %d words of %d max, tokenCount: %d\012"
   \              0x6D 0x45    
   \              0x45 0x20    
   \              0x64 0x61    
   \              0x74 0x61    
   \              0x3A 0x20    
   \              0x25 0x64    
   \              0x20 0x77    
   \              0x6F 0x72    
   \              0x64 0x73    
   \              0x20 0x6F    
   \              0x66 0x20    
   \              0x25 0x64    
   \              0x20 0x6D    
   \              0x61 0x78    
   \              0x2C 0x20    
   \              0x74 0x6F    
   \              0x6B 0x65    
   \              0x6E 0x43    
   \              0x6F 0x75    
   \              0x6E 0x74    
   \              0x3A 0x20    
   \              0x25 0x64    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_2:
   \   00000000   0x73 0x69          DC8 "sim-eeprom.c"
   \              0x6D 0x2D    
   \              0x65 0x65    
   \              0x70 0x72    
   \              0x6F 0x6D    
   \              0x2E 0x63    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      48   halInternalSimEeStartup
        48   -> checkForSimEe2DataExistence
        48   -> emberDebugPrintf
        48   -> halCommonMemSet
        48   -> halInternalAssertFailed
        48   -> halInternalSimEeStartupCore


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable14
       4  ??DataTable14_1
       4  ??DataTable14_2
       4  ??DataTable14_3
       4  ??DataTable14_4
      28  ?_0
      48  ?_1
      16  ?_2
       2  ERASE_CRITICAL_THRESHOLD
       2  ID_COUNT
       2  LEFT_BASE
       2  LEFT_TOP
       2  PTR_CACHE_SIZE
       1  REAL_PAGES_PER_VIRTUAL
       2  REAL_PAGE_SIZE
       2  RIGHT_BASE
       2  RIGHT_TOP
     188  halInternalSimEeStartup
      56  ptrCache
    8192  simulatedEepromStorage
      12  sizeCache
       4  totalTokenStorage

 
    56 bytes in section .bss
    33 bytes in section .rodata
   300 bytes in section .text
 8 192 bytes in section SIMEE
 
   300 bytes of CODE  memory
    33 bytes of CONST memory
 8 248 bytes of DATA  memory

Errors: none
Warnings: none
