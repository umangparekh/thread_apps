###############################################################################
#
# IAR ANSI C/C++ Compiler V7.30.1.7746/W32 for ARM        28/Sep/2015  14:43:30
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  C:\SiliconLabs\Thread-1.0.1\hal\micro\generic\endian.c
#    Command line =  
#        C:\SiliconLabs\Thread-1.0.1\hal\micro\generic\endian.c -D APP_BTL -D
#        CORTEXM3 -D CORTEXM3_EMBER_MICRO -D CORTEXM3_EM3588 -D PHY_EM3XX -D
#        "BOARD_HEADER=\"thread-board.h\"" -D
#        "CONFIGURATION_HEADER=\"thread-configuration.h\"" -D
#        "PLATFORM_HEADER=\"hal/micro/cortexm3/compiler/iar.h\"" -D
#        "__SOURCEFILE__=\"endian.c\"" -D BOARD_DEV0680ETM -D
#        "EMBER_AF_API_EMBER_TYPES=\"stack/include/ember-types.h\"" -D
#        EMBER_STACK_IP -D EMBER_RIP_STACK -D HAVE_TLS_JPAKE -D
#        DEBUG_LEVEL=FULL_DEBUG -D
#        "APPLICATION_TOKEN_HEADER=\"thread-token.h\"" -lC
#        C:\SiliconLabs\Thread-1.0.1\app\Thread_Sample_Client\build\lst\
#        --diag_suppress Pa050 -o
#        C:\SiliconLabs\Thread-1.0.1\app\Thread_Sample_Client\build\obj\
#        --debug --endian=little --cpu=Cortex-M3 --no_path_in_file_macros
#        --separate_cluster_for_initialized_variables -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\SiliconLabs\Thread-1.0.1\hal\micro\generic\ -I
#        C:\SiliconLabs\Thread-1.0.1\app\Thread_Sample_Client\ -I
#        C:\SiliconLabs\Thread-1.0.1\app\Thread_Sample_Client\..\..\ -I
#        C:\SiliconLabs\Thread-1.0.1\app\Thread_Sample_Client\..\..\app\util\
#        -I C:\SiliconLabs\Thread-1.0.1\app\Thread_Sample_Client\..\..\stack\
#        -I C:\SiliconLabs\Thread-1.0.1\app\Thread_Sample_Client\..\..\hal\ -I
#        C:\SiliconLabs\Thread-1.0.1\app\Thread_Sample_Client\..\..\hal\..\
#        -Ohz --use_c++_inline
#    List file    =  
#        C:\SiliconLabs\Thread-1.0.1\app\Thread_Sample_Client\build\lst\endian.lst
#    Object file  =  
#        C:\SiliconLabs\Thread-1.0.1\app\Thread_Sample_Client\build\obj\endian.o
#
###############################################################################

C:\SiliconLabs\Thread-1.0.1\hal\micro\generic\endian.c
      1          /** @file hal/micro/generic/endian.c
      2           *  @brief  Generic firmware source for Endian conversions.
      3           *
      4           * <!-- Author(s): Lee Taylor, lee@ember.com -->
      5           * <!-- Copyright 2004-2009 by Ember Corporation. All rights reserved.   *80*-->   
      6           */
      7          
      8          #include PLATFORM_HEADER
      9          #include "hal/micro/endian.h"
     10          //[[TODO: this include is needed for HIGH_LOW_TO_INT, but seems very klunky]]
     11          #if (!defined(EMBER_STACK_OWL_RX))
     12          #include "stack/include/ember-types.h"
     13          #endif /* EMBER_STACK_OWL_RX */
     14          
     15          // Endian conversion APIs.  
     16          // Network byte order is big endian, so these APIs are only necessary on 
     17          //  platforms which have a natural little endian byte order.  On big-endian
     18          //  platforms, the APIs are macro'd away to nothing
     19          
     20          #ifndef NTOHS
     21          // Network to Host Short
     22          uint16_t NTOHS(uint16_t val)
     23          {
     24            uint8_t *fldPtr;
     25          
     26            fldPtr = (uint8_t *)&val;
     27            return (HIGH_LOW_TO_INT(*fldPtr, *(fldPtr+1)));
     28          }
     29          #endif
     30          
     31          #ifndef NTOHL
     32          // Network to Host Long
     33          uint32_t NTOHL(uint32_t val)
     34          {
     35            uint16_t *fldPtr;
     36            uint16_t field;
     37            uint16_t field2;
     38          
     39            fldPtr = (uint16_t *)&val;
     40            field = NTOHS(*fldPtr);
     41            field2 = NTOHS(*(fldPtr+1));
     42            return ((uint32_t)field << 16) | ((uint32_t)field2);
     43          }
     44          #endif
     45          
     46          
     47          /* Swap byte order, e.g. LE to BE or BE to LE. 
     48           * This function is used when working with 802.15.4 frames on 8051 MCUs. */

   \                                 In section .text, align 2, keep-with-next
     49          uint32_t SwapEndiannessInt32u(uint32_t val)
     50          {
   \                     SwapEndiannessInt32u: (+1)
   \   00000000   0xB401             PUSH     {R0}
   \   00000002   0xB081             SUB      SP,SP,#+4
     51              uint32_t ret;
     52          
     53              ((uint8_t*)&ret)[0] = ((uint8_t*)&val)[3];
   \   00000004   0xF89D 0x0007      LDRB     R0,[SP, #+7]
   \   00000008   0xF88D 0x0000      STRB     R0,[SP, #+0]
     54              ((uint8_t*)&ret)[1] = ((uint8_t*)&val)[2];
   \   0000000C   0xF89D 0x0006      LDRB     R0,[SP, #+6]
   \   00000010   0xF88D 0x0001      STRB     R0,[SP, #+1]
     55              ((uint8_t*)&ret)[2] = ((uint8_t*)&val)[1];
   \   00000014   0xF89D 0x0005      LDRB     R0,[SP, #+5]
   \   00000018   0xF88D 0x0002      STRB     R0,[SP, #+2]
     56              ((uint8_t*)&ret)[3] = ((uint8_t*)&val)[0];
   \   0000001C   0xF89D 0x0004      LDRB     R0,[SP, #+4]
   \   00000020   0xF88D 0x0003      STRB     R0,[SP, #+3]
     57          
     58              return ret;
   \   00000024   0x9800             LDR      R0,[SP, #+0]
   \   00000026   0xB002             ADD      SP,SP,#+8
   \   00000028   0x4770             BX       LR               ;; return
     59          }
     60          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   SwapEndiannessInt32u


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      42  SwapEndiannessInt32u

 
 42 bytes in section .text
 
 42 bytes of CODE memory

Errors: none
Warnings: none
