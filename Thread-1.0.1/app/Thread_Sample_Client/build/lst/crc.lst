###############################################################################
#
# IAR ANSI C/C++ Compiler V7.30.1.7746/W32 for ARM        28/Sep/2015  14:43:27
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  C:\SiliconLabs\Thread-1.0.1\hal\micro\generic\crc.c
#    Command line =  
#        C:\SiliconLabs\Thread-1.0.1\hal\micro\generic\crc.c -D APP_BTL -D
#        CORTEXM3 -D CORTEXM3_EMBER_MICRO -D CORTEXM3_EM3588 -D PHY_EM3XX -D
#        "BOARD_HEADER=\"thread-board.h\"" -D
#        "CONFIGURATION_HEADER=\"thread-configuration.h\"" -D
#        "PLATFORM_HEADER=\"hal/micro/cortexm3/compiler/iar.h\"" -D
#        "__SOURCEFILE__=\"crc.c\"" -D BOARD_DEV0680ETM -D
#        "EMBER_AF_API_EMBER_TYPES=\"stack/include/ember-types.h\"" -D
#        EMBER_STACK_IP -D EMBER_RIP_STACK -D HAVE_TLS_JPAKE -D
#        DEBUG_LEVEL=FULL_DEBUG -D
#        "APPLICATION_TOKEN_HEADER=\"thread-token.h\"" -lC
#        C:\SiliconLabs\Thread-1.0.1\app\Thread_Sample_Client\build\lst\
#        --diag_suppress Pa050 -o
#        C:\SiliconLabs\Thread-1.0.1\app\Thread_Sample_Client\build\obj\
#        --debug --endian=little --cpu=Cortex-M3 --no_path_in_file_macros
#        --separate_cluster_for_initialized_variables -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\SiliconLabs\Thread-1.0.1\hal\micro\generic\ -I
#        C:\SiliconLabs\Thread-1.0.1\app\Thread_Sample_Client\ -I
#        C:\SiliconLabs\Thread-1.0.1\app\Thread_Sample_Client\..\..\ -I
#        C:\SiliconLabs\Thread-1.0.1\app\Thread_Sample_Client\..\..\app\util\
#        -I C:\SiliconLabs\Thread-1.0.1\app\Thread_Sample_Client\..\..\stack\
#        -I C:\SiliconLabs\Thread-1.0.1\app\Thread_Sample_Client\..\..\hal\ -I
#        C:\SiliconLabs\Thread-1.0.1\app\Thread_Sample_Client\..\..\hal\..\
#        -Ohz --use_c++_inline
#    List file    =  
#        C:\SiliconLabs\Thread-1.0.1\app\Thread_Sample_Client\build\lst\crc.lst
#    Object file  =  
#        C:\SiliconLabs\Thread-1.0.1\app\Thread_Sample_Client\build\obj\crc.o
#
###############################################################################

C:\SiliconLabs\Thread-1.0.1\hal\micro\generic\crc.c
      1          /** @file hal/micro/generic/crc.c
      2           *  @brief  Generic firmware source for Cyclic Redundancy Check calculations.
      3           *
      4           * <!-- Copyright 2004-2010 by Ember Corporation. All rights reserved.   *80*-->
      5           */
      6          
      7          #include PLATFORM_HEADER
      8          #include "hal/micro/crc.h"
      9          
     10          /*
     11            16bit CRC notes:
     12            "CRC-CCITT"
     13              poly is g(X) = X^16 + X^12 + X^5 + 1  (0x1021)
     14              used in the FPGA (green boards and 15.4)
     15              initial remainder should be 0xFFFF
     16          */
     17          
     18          //[[
     19          // This CRC seems to take about the same amount of time as the table driven CRC
     20          // which was timed at 34 cycles on the mega128 (8.5us @4MHz) and it utilizes
     21          // much less flash.  
     22          //]]

   \                                 In section .text, align 2, keep-with-next
     23          uint16_t halCommonCrc16( uint8_t newByte, uint16_t prevResult  )
     24          {
     25            prevResult = ((uint16_t) (prevResult >> 8)) | ((uint16_t) (prevResult << 8));
     26            prevResult ^= newByte;
   \                     halCommonCrc16: (+1)
   \   00000000   0x020A             LSLS     R2,R1,#+8
   \   00000002   0xEA42 0x2111      ORR      R1,R2,R1, LSR #+8
   \   00000006   0x4048             EORS     R0,R0,R1
     27            prevResult ^= (prevResult & 0xff) >> 4;
   \   00000008   0xF3C0 0x1103      UBFX     R1,R0,#+4,#+4
   \   0000000C   0x4048             EORS     R0,R1,R0
     28            prevResult ^= (uint16_t) (((uint16_t) (prevResult << 8)) << 4);
   \   0000000E   0xEA80 0x3000      EOR      R0,R0,R0, LSL #+12
     29          
     30            //[[ What I wanted is the following function:
     31            // prevResult ^= ((prevResult & 0xff) << 4) << 1;
     32            // Unfortunately the compiler does this in 46 cycles.  The next line of code
     33            // does the same thing, but the compiler uses only 10 cycles to implement it.
     34            //]]
     35            prevResult ^= ((uint8_t) (((uint8_t) (prevResult & 0xff)) << 5)) |
     36              ((uint16_t) ((uint16_t) ((uint8_t) (((uint8_t) (prevResult & 0xff)) >> 3)) << 8));
     37          
     38            return prevResult;
   \   00000012   0x0141             LSLS     R1,R0,#+5
   \   00000014   0x0602             LSLS     R2,R0,#+24
   \   00000016   0xB2C9             UXTB     R1,R1
   \   00000018   0x0ED2             LSRS     R2,R2,#+27
   \   0000001A   0xEA41 0x2102      ORR      R1,R1,R2, LSL #+8
   \   0000001E   0x4048             EORS     R0,R1,R0
   \   00000020   0xB280             UXTH     R0,R0
   \   00000022   0x4770             BX       LR               ;; return
     39          }
     40          
     41          //--------------------------------------------------------------
     42          // CRC-32 
     43          #define POLYNOMIAL              (0xEDB88320L)
     44          

   \                                 In section .text, align 2, keep-with-next
     45          uint32_t halCommonCrc32(uint8_t newByte, uint32_t prevResult)
     46          {
     47            uint8_t jj;
     48            uint32_t previous;
     49            uint32_t oper;
     50          
     51            previous = (prevResult >> 8) & 0x00FFFFFFL;
   \                     halCommonCrc32: (+1)
   \   00000000   0x0A0A             LSRS     R2,R1,#+8
     52            oper = (prevResult ^ newByte) & 0xFF;
   \   00000002   0x4048             EORS     R0,R0,R1
   \   00000004   0xB2C0             UXTB     R0,R0
     53            for (jj = 0; jj < 8; jj++) {
   \   00000006   0x2108             MOVS     R1,#+8
     54              oper = ((oper & 0x01)
     55                          ? ((oper >> 1) ^ POLYNOMIAL)
     56                          : (oper >> 1));
   \                     ??halCommonCrc32_0: (+1)
   \   00000008   0x0843             LSRS     R3,R0,#+1
   \   0000000A   0x07C0             LSLS     R0,R0,#+31
   \   0000000C   0xBF46             ITTE     MI 
   \   0000000E   0x....             LDRMI.N  R0,??DataTable0  ;; 0xedb88320
   \   00000010   0x4058             EORMI    R0,R0,R3
   \   00000012   0x4618             MOVPL    R0,R3
     57            }
   \   00000014   0x1E49             SUBS     R1,R1,#+1
   \   00000016   0xD1F7             BNE.N    ??halCommonCrc32_0
     58          
     59            return (previous ^ oper);
   \   00000018   0x4050             EORS     R0,R0,R2
   \   0000001A   0x4770             BX       LR               ;; return
     60          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0:
   \   00000000   0xEDB88320         DC32     0xedb88320

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   halCommonCrc16
       0   halCommonCrc32


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable0
      36  halCommonCrc16
      28  halCommonCrc32

 
 68 bytes in section .text
 
 68 bytes of CODE memory

Errors: none
Warnings: none
