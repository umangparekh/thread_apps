###############################################################################
#
# IAR ANSI C/C++ Compiler V7.30.1.7746/W32 for ARM        28/Sep/2015  14:43:29
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\SiliconLabs\Thread-1.0.1\hal\micro\cortexm3\usb\em_usbdch9.c
#    Command line =  
#        C:\SiliconLabs\Thread-1.0.1\hal\micro\cortexm3\usb\em_usbdch9.c -D
#        APP_BTL -D CORTEXM3 -D CORTEXM3_EMBER_MICRO -D CORTEXM3_EM3588 -D
#        PHY_EM3XX -D "BOARD_HEADER=\"thread-board.h\"" -D
#        "CONFIGURATION_HEADER=\"thread-configuration.h\"" -D
#        "PLATFORM_HEADER=\"hal/micro/cortexm3/compiler/iar.h\"" -D
#        "__SOURCEFILE__=\"em_usbdch9.c\"" -D BOARD_DEV0680ETM -D
#        "EMBER_AF_API_EMBER_TYPES=\"stack/include/ember-types.h\"" -D
#        EMBER_STACK_IP -D EMBER_RIP_STACK -D HAVE_TLS_JPAKE -D
#        DEBUG_LEVEL=FULL_DEBUG -D
#        "APPLICATION_TOKEN_HEADER=\"thread-token.h\"" -lC
#        C:\SiliconLabs\Thread-1.0.1\app\Thread_Sample_Client\build\lst\
#        --diag_suppress Pa050 -o
#        C:\SiliconLabs\Thread-1.0.1\app\Thread_Sample_Client\build\obj\
#        --debug --endian=little --cpu=Cortex-M3 --no_path_in_file_macros
#        --separate_cluster_for_initialized_variables -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\SiliconLabs\Thread-1.0.1\hal\micro\cortexm3\usb\ -I
#        C:\SiliconLabs\Thread-1.0.1\app\Thread_Sample_Client\ -I
#        C:\SiliconLabs\Thread-1.0.1\app\Thread_Sample_Client\..\..\ -I
#        C:\SiliconLabs\Thread-1.0.1\app\Thread_Sample_Client\..\..\app\util\
#        -I C:\SiliconLabs\Thread-1.0.1\app\Thread_Sample_Client\..\..\stack\
#        -I C:\SiliconLabs\Thread-1.0.1\app\Thread_Sample_Client\..\..\hal\ -I
#        C:\SiliconLabs\Thread-1.0.1\app\Thread_Sample_Client\..\..\hal\..\
#        -Ohz --use_c++_inline
#    List file    =  
#        C:\SiliconLabs\Thread-1.0.1\app\Thread_Sample_Client\build\lst\em_usbdch9.lst
#    Object file  =  
#        C:\SiliconLabs\Thread-1.0.1\app\Thread_Sample_Client\build\obj\em_usbdch9.o
#
###############################################################################

C:\SiliconLabs\Thread-1.0.1\hal\micro\cortexm3\usb\em_usbdch9.c
      1          /**************************************************************************//**
      2           * @file
      3           * @brief USB protocol stack library, USB chapter 9 command handler.
      4           * @author Nathaniel Ting
      5           * @version 3.20.3
      6           * <!-- Copyright 2013 by Silicon Laboratories. All rights reserved.     *80*-->
      7           *****************************************************************************/
      8          
      9          
     10          #include PLATFORM_HEADER
     11          #include "stack/include/ember.h"
     12          #include "hal/hal.h"
     13          
     14          #if defined(CORTEXM3_EM35X_USB)
     15          #include "em_usb.h"
     16          #include "em_usbhal.h"
     17          #include "em_usbtypes.h"
     18          #include "em_usbd.h"
     19          
     20          /** @cond DO_NOT_INCLUDE_WITH_DOXYGEN */
     21          
     22          static USB_Status_TypeDef ClearFeature     ( USBD_Device_TypeDef *pDev );
     23          static USB_Status_TypeDef GetConfiguration ( USBD_Device_TypeDef *pDev );
     24          static USB_Status_TypeDef GetDescriptor    ( USBD_Device_TypeDef *pDev );
     25          static USB_Status_TypeDef GetInterface     ( USBD_Device_TypeDef *pDev );
     26          static USB_Status_TypeDef GetStatus        ( USBD_Device_TypeDef *pDev );
     27          static USB_Status_TypeDef SetAddress       ( USBD_Device_TypeDef *pDev );
     28          static USB_Status_TypeDef SetConfiguration ( USBD_Device_TypeDef *pDev );
     29          static USB_Status_TypeDef SetFeature       ( USBD_Device_TypeDef *pDev );
     30          static USB_Status_TypeDef SetInterface     ( USBD_Device_TypeDef *pDev );
     31          
     32          

   \                                 In section .text, align 2, keep-with-next
     33          int USBDCH9_SetupCmd( USBD_Device_TypeDef *device )
     34          {
   \                     USBDCH9_SetupCmd: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
     35            int status;
     36            device->setup = (USB_Setup_TypeDef *)usbBufferA.eps.ep0OUT;
   \   00000004   0x....             LDR.N    R5,??DataTable0
   \   00000006   0xF105 0x0008      ADD      R0,R5,#+8
   \   0000000A   0x6020             STR      R0,[R4, #+0]
   \   0000000C   0x6B20             LDR      R0,[R4, #+48]
   \   0000000E   0x6881             LDR      R1,[R0, #+8]
   \   00000010   0x0008             MOVS     R0,R1
   \   00000012   0xD005             BEQ.N    ??USBDCH9_SetupCmd_0
     37            USB_Setup_TypeDef *p = device->setup;
     38          
     39            #ifdef USB_DEBUG_CH9
     40            uint8_t i;
     41            for(i=0;i<8;i++) {
     42              DEBUG_BUFFER += sprintf(DEBUG_BUFFER, "%02X", usbBufferA.eps.ep0OUT[i]);
     43            }
     44            DEBUG_BUFFER += sprintf(DEBUG_BUFFER, "\t");
     45            #endif
     46          
     47            // DEBUG_BUFFER += sprintf(DEBUG_BUFFER, "bmRequestType = %X\r\n" , p->bmRequestType);
     48            // DEBUG_BUFFER += sprintf(DEBUG_BUFFER, "bRequest =      %X\r\n" , p->bRequest);
     49            // DEBUG_BUFFER += sprintf(DEBUG_BUFFER, "wValue =        %X\r\n" , p->wValue);
     50            // DEBUG_BUFFER += sprintf(DEBUG_BUFFER, "wIndex =        %X\r\n" , p->wIndex);
     51            // DEBUG_BUFFER += sprintf(DEBUG_BUFFER, "wLength =       %X\r\n" , p->wLength);
     52          
     53            /* Vendor unique, Class or Standard setup commands override ? */
     54            if ( device->callbacks->setupCmd )
     55            {
     56              status = device->callbacks->setupCmd( p );
   \   00000014   0xF105 0x0008      ADD      R0,R5,#+8
   \   00000018   0x4788             BLX      R1
     57          
     58              if ( status != USB_STATUS_REQ_UNHANDLED )
   \   0000001A   0xF110 0x0F03      CMN      R0,#+3
   \   0000001E   0xD10D             BNE.N    ??USBDCH9_SetupCmd_1
     59              {
     60                return status;
     61              }
     62            }
     63          
     64            status = USB_STATUS_REQ_ERR;
     65          
     66            if ( p->Type == USB_SETUP_TYPE_STANDARD )
   \                     ??USBDCH9_SetupCmd_0: (+1)
   \   00000020   0x7A29             LDRB     R1,[R5, #+8]
   \   00000022   0xF3C1 0x1141      UBFX     R1,R1,#+5,#+2
   \   00000026   0x2900             CMP      R1,#+0
   \   00000028   0xBF04             ITT      EQ 
   \   0000002A   0x7A69             LDRBEQ   R1,[R5, #+9]
   \   0000002C   0x2906             CMPEQ    R1,#+6
   \   0000002E   0xF04F 0x30FF      MOV      R0,#-1
     67            {
     68              switch ( p->bRequest )
   \   00000032   0xD103             BNE.N    ??USBDCH9_SetupCmd_1
     69              {
     70                case GET_DESCRIPTOR:
     71                  #ifdef USB_DEBUG_CH9
     72                  DEBUG_BUFFER += sprintf(DEBUG_BUFFER, "GET_DESCRIPTOR -> \r\n");
     73                  #endif
     74                  status = GetDescriptor( device );
   \   00000034   0x4620             MOV      R0,R4
   \   00000036   0xE8BD 0x4032      POP      {R1,R4,R5,LR}
   \   0000003A   0x....             B.N      GetDescriptor
     75                  break;
     76          
     77                /*Hardware Handled Standard Commands. Can be disabled.*/
     78                case GET_STATUS:
     79                  #ifdef USB_DEBUG_CH9
     80                  DEBUG_BUFFER += sprintf(DEBUG_BUFFER, "GET_STATUS -> \r\n");
     81                  #endif
     82                  status = GetStatus( device );
     83                  break;
     84          
     85                case CLEAR_FEATURE:
     86                  #ifdef USB_DEBUG_CH9
     87                  DEBUG_BUFFER += sprintf(DEBUG_BUFFER, "CLEAR_FEATURE -> \r\n");
     88                  #endif
     89                  status = ClearFeature( device );
     90                  break;
     91          
     92                case SET_FEATURE:
     93                  #ifdef USB_DEBUG_CH9
     94                  DEBUG_BUFFER += sprintf(DEBUG_BUFFER, "SET_FEATURE -> \r\n");
     95                  #endif
     96                  status = SetFeature( device );
     97                  break;
     98          
     99                case SET_ADDRESS:
    100                  #ifdef USB_DEBUG_CH9
    101                  DEBUG_BUFFER += sprintf(DEBUG_BUFFER, "SET_ADDRESS -> \r\n");
    102                  #endif
    103                  status = SetAddress( device );
    104                  break;
    105          
    106          
    107                case GET_CONFIGURATION:
    108                  #ifdef USB_DEBUG_CH9
    109                  DEBUG_BUFFER += sprintf(DEBUG_BUFFER, "GET_CONFIGURATION -> \r\n");
    110                  #endif
    111                  status = GetConfiguration( device );
    112                  break;
    113          
    114                case SET_CONFIGURATION:
    115                  #ifdef USB_DEBUG_CH9
    116                  DEBUG_BUFFER += sprintf(DEBUG_BUFFER, "SET_CONFIGURATION -> \r\n");
    117                  #endif
    118                  status = SetConfiguration( device );
    119                  break;
    120          
    121                case GET_INTERFACE:
    122                  #ifdef USB_DEBUG_CH9
    123                  DEBUG_BUFFER += sprintf(DEBUG_BUFFER, "GET_INTERFACE -> \r\n");
    124                  #endif
    125                  status = GetInterface( device );
    126                  break;
    127          
    128                case SET_INTERFACE:
    129                  #ifdef USB_DEBUG_CH9
    130                  DEBUG_BUFFER += sprintf(DEBUG_BUFFER, "SET_INTERFACE -> \r\n");
    131                  #endif
    132                  status = SetInterface( device );
    133                  break;
    134          
    135                case SYNCH_FRAME:     /* Synch frame is for isochronous endpoints */
    136                case SET_DESCRIPTOR:  /* Set descriptor is optional */
    137                default:
    138                  break;
    139              }
    140            }
    141          
    142            return status;
   \                     ??USBDCH9_SetupCmd_1: (+1)
   \   0000003C   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    143          }
    144          

   \                                 In section .text, align 2, keep-with-next
    145          static USB_Status_TypeDef GetDescriptor( USBD_Device_TypeDef *pDev )
    146          {
   \                     GetDescriptor: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
    147            int index;
    148            uint16_t length = 0;
    149            const void *data = NULL;
    150            USB_Setup_TypeDef *p = pDev->setup;
   \   00000002   0x6806             LDR      R6,[R0, #+0]
    151            USB_Status_TypeDef retVal = USB_STATUS_REQ_ERR;
    152          
    153            if ( ( p->Recipient != USB_SETUP_RECIPIENT_DEVICE ) ||
    154                 ( p->Direction != USB_SETUP_DIR_IN           )    )
   \   00000004   0x7831             LDRB     R1,[R6, #+0]
   \   00000006   0x2400             MOVS     R4,#+0
   \   00000008   0x2500             MOVS     R5,#+0
   \   0000000A   0x221F             MOVS     R2,#+31
   \   0000000C   0x4211             TST      R1,R2
   \   0000000E   0xF04F 0x37FF      MOV      R7,#-1
   \   00000012   0xD128             BNE.N    ??GetDescriptor_0
   \   00000014   0x09C9             LSRS     R1,R1,#+7
   \   00000016   0xD026             BEQ.N    ??GetDescriptor_0
    155            {
    156              return USB_STATUS_REQ_ERR;
    157            }
    158          
    159            // identify descriptor request and return the appropriate descriptor
    160            index = p->wValue & 0xFF;
   \                     ??GetDescriptor_1: (+1)
   \   00000018   0x8871             LDRH     R1,[R6, #+2]
   \   0000001A   0xB2CA             UXTB     R2,R1
    161            switch ( p->wValue >> 8 )
   \   0000001C   0x0A09             LSRS     R1,R1,#+8
   \   0000001E   0x2901             CMP      R1,#+1
   \   00000020   0xD004             BEQ.N    ??GetDescriptor_2
   \   00000022   0xD314             BCC.N    ??GetDescriptor_3
   \   00000024   0x2903             CMP      R1,#+3
   \   00000026   0xD00B             BEQ.N    ??GetDescriptor_4
   \   00000028   0xD303             BCC.N    ??GetDescriptor_5
   \   0000002A   0xE010             B.N      ??GetDescriptor_3
    162            {
    163              case USB_DEVICE_DESCRIPTOR :
    164                #ifdef USB_DEBUG3
    165                DEBUG_BUFFER += sprintf(DEBUG_BUFFER, "DeviceDescriptor \r\n");
    166                #endif
    167                if ( index != 0 )
   \                     ??GetDescriptor_2: (+1)
   \   0000002C   0xB9DA             CBNZ.N   R2,??GetDescriptor_0
    168                {
    169                  break;
    170                }
    171          
    172                data   = pDev->deviceDescriptor;
   \   0000002E   0x6A45             LDR      R5,[R0, #+36]
    173                length = pDev->deviceDescriptor->bLength;
   \   00000030   0xE00C             B.N      ??GetDescriptor_6
    174                break;
    175          
    176              case USB_CONFIG_DESCRIPTOR :
    177                #ifdef USB_DEBUG3
    178                DEBUG_BUFFER += sprintf(DEBUG_BUFFER, "ConfigDescriptor \r\n");
    179                #endif
    180                if ( index != 0 )
   \                     ??GetDescriptor_5: (+1)
   \   00000032   0xB9C2             CBNZ.N   R2,??GetDescriptor_0
    181                {
    182                  break;
    183                }
    184                data   = pDev->configDescriptor;
   \   00000034   0x6A85             LDR      R5,[R0, #+40]
    185                length = pDev->configDescriptor->wTotalLength;
   \   00000036   0x886C             LDRH     R4,[R5, #+2]
    186                USBD_SetUsbState(USBD_STATE_CONFIGURED);
   \   00000038   0x2004             MOVS     R0,#+4
   \   0000003A   0x.... 0x....      BL       USBD_SetUsbState
    187                break;
   \   0000003E   0xE006             B.N      ??GetDescriptor_3
    188          
    189              case USB_STRING_DESCRIPTOR :
    190                #ifdef USB_DEBUG3
    191                DEBUG_BUFFER += sprintf(DEBUG_BUFFER, "StringDescriptor:%d \r\n",index);
    192                #endif
    193                if ( index < pDev->numberOfStrings )
   \                     ??GetDescriptor_4: (+1)
   \   00000040   0x7F81             LDRB     R1,[R0, #+30]
   \   00000042   0x428A             CMP      R2,R1
   \   00000044   0xDA0F             BGE.N    ??GetDescriptor_0
    194                {
    195                  USB_StringDescriptor_TypeDef *s;
    196                  s = ((USB_StringDescriptor_TypeDef**)pDev->stringDescriptors)[index];
   \   00000046   0x6AC0             LDR      R0,[R0, #+44]
   \   00000048   0xF850 0x5022      LDR      R5,[R0, R2, LSL #+2]
    197          
    198                  data   = s;
    199                  length = s->len;
   \                     ??GetDescriptor_6: (+1)
   \   0000004C   0x782C             LDRB     R4,[R5, #+0]
    200                }
    201                break;
    202            }
    203          
    204            // call USBD_Write to send data back over EPO, which will also update EP state
    205            if ( length )
   \                     ??GetDescriptor_3: (+1)
   \   0000004E   0xB154             CBZ.N    R4,??GetDescriptor_0
    206            {
    207              USBD_Write( 0, (void*)data, EFM32_MIN( length, p->wLength ), NULL );
   \   00000050   0x88F0             LDRH     R0,[R6, #+6]
   \   00000052   0x4284             CMP      R4,R0
   \   00000054   0xBF28             IT       CS 
   \   00000056   0x4604             MOVCS    R4,R0
   \   00000058   0x2300             MOVS     R3,#+0
   \   0000005A   0x4622             MOV      R2,R4
   \   0000005C   0x4629             MOV      R1,R5
   \   0000005E   0x2000             MOVS     R0,#+0
   \   00000060   0x.... 0x....      BL       USBD_Write
    208              retVal = USB_STATUS_OK;
   \   00000064   0x2700             MOVS     R7,#+0
    209            }
    210          
    211            return retVal;
   \                     ??GetDescriptor_0: (+1)
   \   00000066   0x4638             MOV      R0,R7
   \   00000068   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    212          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0:
   \   00000000   0x........         DC32     usbBufferA
    213          
    214          
    215          /* Hardware Handled Standard Commands */
    216          static USB_Status_TypeDef ClearFeature( USBD_Device_TypeDef *pDev )
    217          {
    218            USB_Status_TypeDef retVal = USB_STATUS_REQ_ERR;
    219            return retVal;
    220          }
    221          
    222          static USB_Status_TypeDef GetConfiguration( USBD_Device_TypeDef *pDev )
    223          {
    224            USB_Status_TypeDef retVal = USB_STATUS_REQ_ERR;
    225            return retVal;
    226          }
    227          
    228          static USB_Status_TypeDef GetInterface( USBD_Device_TypeDef *pDev )
    229          {
    230            USB_Status_TypeDef retVal = USB_STATUS_REQ_ERR;
    231            return retVal;
    232          }
    233          
    234          static USB_Status_TypeDef GetStatus( USBD_Device_TypeDef *pDev )
    235          {
    236            USB_Status_TypeDef retVal = USB_STATUS_REQ_ERR;
    237            return retVal;
    238          }
    239          
    240          static USB_Status_TypeDef SetAddress( USBD_Device_TypeDef *pDev )
    241          {
    242            USB_Status_TypeDef retVal = USB_STATUS_REQ_ERR;
    243            return retVal;
    244          }
    245          
    246          static USB_Status_TypeDef SetConfiguration( USBD_Device_TypeDef *pDev )
    247          {
    248            USB_Status_TypeDef retVal = USB_STATUS_REQ_ERR;
    249            return retVal;
    250          }
    251          
    252          static USB_Status_TypeDef SetFeature( USBD_Device_TypeDef *pDev )
    253          {
    254            USB_Status_TypeDef retVal = USB_STATUS_REQ_ERR;
    255            return retVal;
    256          }
    257          
    258          static USB_Status_TypeDef SetInterface( USBD_Device_TypeDef *pDev )
    259          {
    260            USB_Status_TypeDef retVal = USB_STATUS_REQ_ERR;
    261            return retVal;
    262          }
    263          
    264          /** @endcond */
    265          
    266          #endif //CORTEXM3_EM35X_USB
    267          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      24   GetDescriptor
        24   -> USBD_SetUsbState
        24   -> USBD_Write
      16   USBDCH9_SetupCmd
        16   -- Indirect call
         0   -> GetDescriptor


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable0
     106  GetDescriptor
      62  USBDCH9_SetupCmd

 
 172 bytes in section .text
 
 172 bytes of CODE memory

Errors: none
Warnings: none
